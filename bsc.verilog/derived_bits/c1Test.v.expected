//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// abcd_isA                       O     1 const
// RDY_abcd_isA                   O     1 const
// abcd_isB                       O     1 const
// RDY_abcd_isB                   O     1 const
// abcd_isC                       O     1 const
// RDY_abcd_isC                   O     1 const
// abcd_isD                       O     1 const
// RDY_abcd_isD                   O     1 const
// isE                            O     1 const
// RDY_isE                        O     1 const
// isF                            O     1 const
// RDY_isF                        O     1 const
// isG                            O     1 const
// RDY_isG                        O     1 const
// isH                            O     1
// RDY_isH                        O     1 const
// isI                            O     1
// RDY_isI                        O     1 const
// isJ                            O     1
// RDY_isJ                        O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module c1Test(CLK,
	      RST_N,

	      abcd_isA,
	      RDY_abcd_isA,

	      abcd_isB,
	      RDY_abcd_isB,

	      abcd_isC,
	      RDY_abcd_isC,

	      abcd_isD,
	      RDY_abcd_isD,

	      isE,
	      RDY_isE,

	      isF,
	      RDY_isF,

	      isG,
	      RDY_isG,

	      isH,
	      RDY_isH,

	      isI,
	      RDY_isI,

	      isJ,
	      RDY_isJ);
  input  CLK;
  input  RST_N;

  // value method abcd_isA
  output abcd_isA;
  output RDY_abcd_isA;

  // value method abcd_isB
  output abcd_isB;
  output RDY_abcd_isB;

  // value method abcd_isC
  output abcd_isC;
  output RDY_abcd_isC;

  // value method abcd_isD
  output abcd_isD;
  output RDY_abcd_isD;

  // value method isE
  output isE;
  output RDY_isE;

  // value method isF
  output isF;
  output RDY_isF;

  // value method isG
  output isG;
  output RDY_isG;

  // value method isH
  output isH;
  output RDY_isH;

  // value method isI
  output isI;
  output RDY_isI;

  // value method isJ
  output isJ;
  output RDY_isJ;

  // signals for module outputs
  wire RDY_abcd_isA,
       RDY_abcd_isB,
       RDY_abcd_isC,
       RDY_abcd_isD,
       RDY_isE,
       RDY_isF,
       RDY_isG,
       RDY_isH,
       RDY_isI,
       RDY_isJ,
       abcd_isA,
       abcd_isB,
       abcd_isC,
       abcd_isD,
       isE,
       isF,
       isG,
       isH,
       isI,
       isJ;

  // register r
  reg [4 : 0] r;
  wire [4 : 0] r$D_IN;
  wire r$EN;

  // value method abcd_isA
  assign abcd_isA = 1'd0 ;
  assign RDY_abcd_isA = 1'd1 ;

  // value method abcd_isB
  assign abcd_isB = 1'd0 ;
  assign RDY_abcd_isB = 1'd1 ;

  // value method abcd_isC
  assign abcd_isC = 1'd0 ;
  assign RDY_abcd_isC = 1'd1 ;

  // value method abcd_isD
  assign abcd_isD = 1'd0 ;
  assign RDY_abcd_isD = 1'd1 ;

  // value method isE
  assign isE = 1'd0 ;
  assign RDY_isE = 1'd1 ;

  // value method isF
  assign isF = 1'd0 ;
  assign RDY_isF = 1'd1 ;

  // value method isG
  assign isG = 1'd0 ;
  assign RDY_isG = 1'd1 ;

  // value method isH
  assign isH = r[4:3] == 2'd0 ;
  assign RDY_isH = 1'd1 ;

  // value method isI
  assign isI = r[4:3] == 2'd1 ;
  assign RDY_isI = 1'd1 ;

  // value method isJ
  assign isJ = r[4:3] == 2'd2 ;
  assign RDY_isJ = 1'd1 ;

  // register r
  assign r$D_IN = 5'h0 ;
  assign r$EN = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (r$EN) r <= `BSV_ASSIGNMENT_DELAY r$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    r = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // c1Test

