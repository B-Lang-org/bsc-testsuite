//
// Generated by Bluespec Compiler
// 
//
// Ports:
// Name                         I/O  size props
// RDY_ifcs_0_test                O     1 const
// RDY_ifcs_1_test                O     1 const
// RDY_ifcs_2_test                O     1 const
// RDY_ifcs_3_test                O     1 const
// RDY_ifcs_4_test                O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// ifcs_0_test_a                  I    32 unused
// ifcs_0_test_b                  I    32 unused
// ifcs_1_test_a                  I    32 unused
// ifcs_1_test_b                  I    32 unused
// ifcs_2_test_a                  I    32 unused
// ifcs_2_test_b                  I    32 unused
// ifcs_3_test_a                  I    32 unused
// ifcs_3_test_b                  I    32 unused
// ifcs_4_test_a                  I    32 unused
// ifcs_4_test_b                  I    32 unused
// EN_ifcs_0_test                 I     1 unused
// EN_ifcs_1_test                 I     1 unused
// EN_ifcs_2_test                 I     1 unused
// EN_ifcs_3_test                 I     1 unused
// EN_ifcs_4_test                 I     1 unused
// 
// No combinational paths from inputs to outputs
// 
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTest01(CLK,
		RST_N,
		
		ifcs_0_test_a,
		ifcs_0_test_b,
		EN_ifcs_0_test,
		RDY_ifcs_0_test,
		
		ifcs_1_test_a,
		ifcs_1_test_b,
		EN_ifcs_1_test,
		RDY_ifcs_1_test,
		
		ifcs_2_test_a,
		ifcs_2_test_b,
		EN_ifcs_2_test,
		RDY_ifcs_2_test,
		
		ifcs_3_test_a,
		ifcs_3_test_b,
		EN_ifcs_3_test,
		RDY_ifcs_3_test,
		
		ifcs_4_test_a,
		ifcs_4_test_b,
		EN_ifcs_4_test,
		RDY_ifcs_4_test);
  input  CLK;
  input  RST_N;
  
  // action method ifcs_0_test
  input  [31 : 0] ifcs_0_test_a;
  input  [31 : 0] ifcs_0_test_b;
  input  EN_ifcs_0_test;
  output RDY_ifcs_0_test;
  
  // action method ifcs_1_test
  input  [31 : 0] ifcs_1_test_a;
  input  [31 : 0] ifcs_1_test_b;
  input  EN_ifcs_1_test;
  output RDY_ifcs_1_test;
  
  // action method ifcs_2_test
  input  [31 : 0] ifcs_2_test_a;
  input  [31 : 0] ifcs_2_test_b;
  input  EN_ifcs_2_test;
  output RDY_ifcs_2_test;
  
  // action method ifcs_3_test
  input  [31 : 0] ifcs_3_test_a;
  input  [31 : 0] ifcs_3_test_b;
  input  EN_ifcs_3_test;
  output RDY_ifcs_3_test;
  
  // action method ifcs_4_test
  input  [31 : 0] ifcs_4_test_a;
  input  [31 : 0] ifcs_4_test_b;
  input  EN_ifcs_4_test;
  output RDY_ifcs_4_test;

  // signals for module outputs
  wire RDY_ifcs_0_test,
       RDY_ifcs_1_test,
       RDY_ifcs_2_test,
       RDY_ifcs_3_test,
       RDY_ifcs_4_test;

  // action method ifcs_0_test
  assign RDY_ifcs_0_test = 1'd1 ;

  // action method ifcs_1_test
  assign RDY_ifcs_1_test = 1'd1 ;

  // action method ifcs_2_test
  assign RDY_ifcs_2_test = 1'd1 ;

  // action method ifcs_3_test
  assign RDY_ifcs_3_test = 1'd1 ;

  // action method ifcs_4_test
  assign RDY_ifcs_4_test = 1'd1 ;
endmodule  // mkTest01

