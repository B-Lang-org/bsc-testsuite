-- Accellera Standard V2.8.1 Open Verification Library (OVL).
-- Accellera Copyright (c) 2005-2014. All rights reserved.

vunit assert_win_change_assert_vunit (assert_win_change_assert)
{
  default clock is rose(clk);

  property ASSERT_WIN_CHANGE_P is always (
           ({start_event = '1' and window = '0' ;stable(test_expr)[*1 to inf]} |-> {not(end_event)})
           abort(not(reset_n)));
  
  -- Properties for X/Z checking

  property ASSERT_WIN_CHANGE_XZ_ON_START_EVENT_P is
           always( xzcheck_enable = 1 and window = '0' -> not(is_x(start_event)))
                  abort(not(reset_n)) ;

  property ASSERT_WIN_CHANGE_XZ_ON_TEST_EXPR_P is
           always( xzcheck_enable = 1 and window = '1' -> xzdetect_test_expr )
                  abort(not(reset_n)) ;
  
  property ASSERT_WIN_CHANGE_XZ_ON_END_EVENT_P is
           always( xzcheck_enable = 1 and window = '1' -> not(is_x(end_event)))
                  abort(not(reset_n)) ;
 

  A_ASSERT_WIN_CHANGE_P:
  assert ASSERT_WIN_CHANGE_P
  report "VIOLATION: ASSERT_WIN_CHANGE Checker Fires: Test expression has not changed value before window is closed";

  A_ASSERT_WIN_CHANGE_XZ_ON_START_EVENT_P:
  assert ASSERT_WIN_CHANGE_XZ_ON_START_EVENT_P
  report "VIOLATION: ASSERT_WIN_CHANGE Checker Fires: start_event contains X or Z";

  A_ASSERT_WIN_CHANGE_XZ_ON_TEST_EXPR_P:
  assert ASSERT_WIN_CHANGE_XZ_ON_TEST_EXPR_P
  report "VIOLATION: ASSERT_WIN_CHANGE Checker Fires: test_expr contains X or Z";

  A_ASSERT_WIN_CHANGE_XZ_ON_END_EVENT_P:
  assert ASSERT_WIN_CHANGE_XZ_ON_END_EVENT_P
  report "VIOLATION: ASSERT_WIN_CHANGE Checker Fires: end_event contains X or Z";
}

vunit assert_win_change_assume_vunit (assert_win_change_assume)
{
  default clock is rose(clk);
  
  property ASSERT_WIN_CHANGE_P is always (
           ({start_event = '1' and window = '0';stable(test_expr)[*1 to inf]} |-> {not(end_event)})
           abort(not(reset_n)));

  -- Properties for X/Z checking

  property ASSERT_WIN_CHANGE_XZ_ON_START_EVENT_P is
           always( xzcheck_enable = 1 and window = '0' -> not(is_x(start_event)))
                  abort(not(reset_n)) ;

  property ASSERT_WIN_CHANGE_XZ_ON_TEST_EXPR_P is
           always( xzcheck_enable = 1 and window = '1' -> xzdetect_test_expr )
                  abort(not(reset_n)) ;

  property ASSERT_WIN_CHANGE_XZ_ON_END_EVENT_P is
           always( xzcheck_enable = 1 and window = '1' -> not(is_x(end_event)))
                  abort(not(reset_n)) ;

  M_ASSERT_WIN_CHANGE_P:
  assume ASSERT_WIN_CHANGE_P;

  M_ASSERT_WIN_CHANGE_XZ_ON_START_EVENT_P:
  assume ASSERT_WIN_CHANGE_XZ_ON_START_EVENT_P;

  M_ASSERT_WIN_CHANGE_XZ_ON_TEST_EXPR_P:
  assume ASSERT_WIN_CHANGE_XZ_ON_TEST_EXPR_P;

  M_ASSERT_WIN_CHANGE_XZ_ON_END_EVENT_P:
  assume ASSERT_WIN_CHANGE_XZ_ON_END_EVENT_P;
}

vunit assert_win_change_cover_vunit (assert_win_change_cover)
{ 
  default clock is rose(clk);

  cover_window_open:
  cover {(OVL_COVER_BASIC_ON = OVL_COVER_BASIC or OVL_COVER_BASIC_ON = OVL_COVER_ALL) and reset_n = '1' and start_event = '1' and window = '0'}
  report "COVERAGE REPORT : ASSERT_WIN_CHANGE Checker: window_open covered";
                                                                                                                                     
  cover_window:
  cover {(OVL_COVER_BASIC_ON = OVL_COVER_BASIC or OVL_COVER_BASIC_ON = OVL_COVER_ALL) and reset_n = '1' and start_event = '1' and window = '0';
  (reset_n = '1' and end_event = '0' and window = '1')[*];reset_n = '1' and end_event = '1' and window = '1'}
  report "COVERAGE REPORT : ASSERT_WIN_CHANGE Checker: window covered";
                                                                                                                                     
}
 
