-- Accellera Standard V2.8.1 Open Verification Library (OVL).
--Accellera Copyright (c) 2005-2014. All rights reserved.

vunit assert_zero_one_hot_assert_vunit (assert_zero_one_hot_assert)
{
  default clock is rose(clk);

  property ASSERT_ZERO_ONE_HOT_XZ_P is always (
          reset_n = '1' and xzcheck_enable = 1 ->
          not(isunknown(test_expr))); 

  property ASSERT_ZERO_ONE_HOT_P is always (
           reset_n = '1' and (not(isunknown(test_expr))) ->
           onehot0(test_expr));

  A_ASSERT_ZERO_ONE_HOT_XZ_P:
  assert ASSERT_ZERO_ONE_HOT_XZ_P
  report "VIOLATION: ASSERT_ZERO_ONE_HOT Checker Fires : test_expr contains X or Z";

  A_ASSERT_ZERO_ONE_HOT_P:
  assert ASSERT_ZERO_ONE_HOT_P
  report "VIOLATION: ASSERT_ZERO_ONE_HOT Checker Fires : Test expression contains more than 1 asserted bits";

}

vunit assert_zero_one_hot_assume_vunit (assert_zero_one_hot_assume)
{

  default clock is rose(clk);

  property ASSERT_ZERO_ONE_HOT_XZ_P is always (
          reset_n = '1' and xzcheck_enable = 1 ->
          not(isunknown(test_expr)));

  property ASSERT_ZERO_ONE_HOT_P is always (
           reset_n = '1' and (not(isunknown(test_expr))) ->
           onehot0(test_expr));
                                                                                                                           
  M_ASSERT_ZERO_ONE_HOT_XZ_P:
  assume ASSERT_ZERO_ONE_HOT_XZ_P;
                                                                                                                             
  M_ASSERT_ZERO_ONE_HOT_P:
  assume ASSERT_ZERO_ONE_HOT_P;
                                                                                                                             
}

vunit assert_zero_one_hot_cover_vunit (assert_zero_one_hot_cover)
{ 
  default clock is rose(clk);

  cover_test_expr_change:
  cover {(OVL_COVER_SANITY_ON = OVL_COVER_SANITY or OVL_COVER_SANITY_ON = OVL_COVER_ALL) and prev(reset_n) = '1' and reset_n = '1' 
	 and (test_expr /= prev(test_expr))}
  report "COVERAGE REPORT : ASSERT_ZERO_ONE_HOT Checker: test_expr_change covered";

  cover_test_expr_all_zeros:
  cover {(OVL_COVER_CORNER_ON = OVL_COVER_CORNER or OVL_COVER_CORNER_ON = OVL_COVER_ALL) and reset_n ='1' and rose(test_expr = (width-1 downto 0 => '0'))}
  report "COVERAGE REPORT : ASSERT_ZERO_ONE_HOT Checker: test_expr_all_zeros covered";
 
  cover_all_one_hots_checked:
  cover {(OVL_COVER_CORNER_ON = OVL_COVER_CORNER or OVL_COVER_CORNER_ON = OVL_COVER_ALL) and reset_n ='1' and rose(all_one_hots_checked)}
  report "COVERAGE REPORT: ASSERT_ZERO_ONE_HOT Checker: all_one_hots_checked covered";
 
} 

