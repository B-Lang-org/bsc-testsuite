-- Accellera Standard V2.8.1 Open Verification Library (OVL).
-- Accellera Copyright (c) 2005-2014. All rights reserved.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

vunit assert_increment_assert_vunit (assert_increment_assert)
{
  default clock is rose(clk);

  property ASSERT_INCREMENT_P is always ( 
            ((value > 0) AND (prev(reset_n) = '1') AND (test_expr /= prev(test_expr))) ->
            (check_condition_integer((test_expr > prev(test_expr)), 
                                     (to_integer(test_expr) - to_integer(prev(test_expr))),  
                                     (to_integer(test_expr) + to_integer(unsigned'((0 to (width -1) => '1'))) - to_integer(prev(test_expr)) + 1)
                                    ) = value) ) abort(not(reset_n))  @(rising_edge(clk));

  --Property for X/Z checking

  property ASSERT_INCREMENT_XZ_ON_TEST_EXPR_P is
           always( (xzcheck_enable = 1) -> not(is_x(test_expr))) abort(not(reset_n)) @(rising_edge(clk));

  A_ASSERT_INCREMENT_P:
  assert ASSERT_INCREMENT_P
  report "VIOLATION: ASSERT_INCREMENT Checker Fires: Test expression is increased by a value other than specified";

  A_ASSERT_INCREMENT_XZ_ON_TEST_EXPR_P:
  assert ASSERT_INCREMENT_XZ_ON_TEST_EXPR_P
  report "VIOLATION: ASSERT_INCREMENT Checker Fires: test_expr contains X or Z";
}

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

vunit assert_increment_assume_vunit (assert_increment_assume)
{
  default clock is rose(clk);

  property ASSERT_INCREMENT_P is always (
            ((value > 0) AND (prev(reset_n) = '1') AND (test_expr /= prev(test_expr))) ->
            (check_condition_integer((test_expr > prev(test_expr)), 
                                     (to_integer(test_expr) - to_integer(prev(test_expr))),  
                                     (to_integer(test_expr) + to_integer(unsigned'((0 to (width -1) => '1'))) - to_integer(prev(test_expr)) + 1)
                                    ) = value) )
				abort(not(reset_n)) @(rising_edge(clk));

  --Property for X/Z checking

  property ASSERT_INCREMENT_XZ_ON_TEST_EXPR_P is
           always( (xzcheck_enable = 1) -> not(is_x(test_expr)) ) abort(not(reset_n)) @(rising_edge(clk));

  M_ASSERT_INCREMENT_P:
  assume ASSERT_INCREMENT_P;

  M_ASSERT_INCREMENT_XZ_ON_TEST_EXPR_P:
  assume ASSERT_INCREMENT_XZ_ON_TEST_EXPR_P;

}

vunit assert_increment_cover_vunit (assert_increment_cover)
{ 
  default clock is rose(clk);

  cover_test_expr_change:
  cover {((OVL_COVER_BASIC_ON = OVL_COVER_BASIC) or (OVL_COVER_BASIC_ON = OVL_COVER_ALL)) and (reset_n = '1') and (prev(reset_n) = '1') and (test_expr /= prev(test_expr))}
  report "COVERAGE REPORT : ASSERT_INCREMENT Checker: test_expr_change covered";
}
 
