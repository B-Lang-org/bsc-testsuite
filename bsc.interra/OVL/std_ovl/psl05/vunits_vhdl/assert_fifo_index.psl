-- Accellera Standard V2.8.1 Open Verification Library (OVL).
-- Accellera Copyright (c) 2005-2014. All rights reserved.

library ieee;
use ieee.std_logic_1164.all;
use work.std_ovl.all;
use work.std_ovl_procs.all;

vunit assert_fifo_index_assert_vunit (assert_fifo_index_assert)
{
  default clock is rose (clk); 

  property ASSERT_FIFO_INDEX_OVERFLOW_P is always (
           (( or_reduce(push) /= '0') AND (NOT((simultaneous_push_pop = 0) AND ((or_reduce(push) /= '0') AND (or_reduce(pop) /= '0'))))) ->
           ((to_integer(cnt) + to_integer(push) - to_integer(pop)) <= depth)) abort (not(reset_n));
           --when simultaneous push pop is not allowed, if it happens then property is not evaluated

  property ASSERT_FIFO_INDEX_UNDERFLOW_P is always (
           (( or_reduce(pop) /= '0') AND (NOT((simultaneous_push_pop = 0) AND ((or_reduce(push) /= '0') AND (or_reduce(pop) /= '0'))))) ->
           ((to_integer(cnt) + to_integer(push)) >= to_integer(pop)) )abort (not(reset_n)) ;
           --when simultaneous push pop is not allowed, if it happens then property is not evaluated
  
  property ASSERT_FIFO_INDEX_ILLEGAL_PUSH_POP_P is always (
           (simultaneous_push_pop = 0) ->
           (NOT(( or_reduce(push) /= '0') AND (or_reduce(pop) /= '0'))) )abort (not(reset_n)) ;
           --when simultaneous push pop is allowed, this property is not evaluated
 
  --Properties for X/Z checking

  property ASSERT_FIFO_INDEX_XZ_ON_PUSH_P is
           always( (xzcheck_enable = 1 )-> not(is_x(push)) )abort(not(reset_n)) ;

  property ASSERT_FIFO_INDEX_XZ_ON_POP_P is
           always( (xzcheck_enable = 1) -> not(is_x(pop))) abort(not(reset_n)) ;

  A_ASSERT_FIFO_INDEX_OVERFLOW_P:
  assert ASSERT_FIFO_INDEX_OVERFLOW_P
  report "VIOLATION: ASSERT_FIFO_INDEX Checker Fires : Fifo overflow detected";

  A_ASSERT_FIFO_INDEX_UNDERFLOW_P:
  assert ASSERT_FIFO_INDEX_UNDERFLOW_P
  report "VIOLATION: ASSERT_FIFO_INDEX Checker Fires : Fifo underflow detected";

  A_ASSERT_FIFO_INDEX_ILLEGAL_PUSH_POP_P:
  assert ASSERT_FIFO_INDEX_ILLEGAL_PUSH_POP_P
  report "VIOLATION: ASSERT_FIFO_INDEX Checker Fires : Illegal simultaneous push pop detected";

  A_ASSERT_FIFO_INDEX_XZ_ON_PUSH_P:
  assert ASSERT_FIFO_INDEX_XZ_ON_PUSH_P
  report "VIOLATION: ASSERT_FIFO_INDEX Checker Fires: push contains X or Z";

  A_ASSERT_FIFO_INDEX_XZ_ON_POP_P:
  assert ASSERT_FIFO_INDEX_XZ_ON_POP_P
  report "VIOLATION: ASSERT_FIFO_INDEX Checker Fires: pop contains X or Z";
}

library ieee;
use ieee.std_logic_1164.all;
use work.std_ovl.all;
use work.std_ovl_procs.all;

vunit assert_fifo_index_assume_vunit (assert_fifo_index_assume)
{
  default clock is rose (clk); 
 
 property ASSERT_FIFO_INDEX_OVERFLOW_P is always (
           (( or_reduce(push) /= '0') AND (NOT((simultaneous_push_pop = 0) AND ((or_reduce(push) /= '0') AND (or_reduce(pop) /= '0'))))) ->
           ((to_integer(cnt) + to_integer(push) - to_integer(pop)) <= depth)) abort (not(reset_n)) ;
           --when simultaneous push pop is not allowed, if it happens then property is not evaluated

  property ASSERT_FIFO_INDEX_UNDERFLOW_P is always (
           (( or_reduce(pop) /= '0') AND (NOT((simultaneous_push_pop = 0) AND ((or_reduce(push) /= '0') AND (or_reduce(pop) /= '0'))))) ->
           ((to_integer(cnt) + to_integer(push)) >= to_integer(pop))) abort (not(reset_n)) ;
           --when simultaneous push pop is not allowed, if it happens then property is not evaluated
  
  property ASSERT_FIFO_INDEX_ILLEGAL_PUSH_POP_P is always (
           (simultaneous_push_pop = 0) ->
           (NOT(( or_reduce(push) /= '0') AND (or_reduce(pop) /= '0'))) )abort (not(reset_n)) ;
           --when simultaneous push pop is allowed, this property is not evaluated
 
  --Properties for X/Z checking

  property ASSERT_FIFO_INDEX_XZ_ON_PUSH_P is
           always( (xzcheck_enable = 1) -> not(is_x(push))) abort(not(reset_n)) ;

  property ASSERT_FIFO_INDEX_XZ_ON_POP_P is
           always( (xzcheck_enable = 1) -> not(is_x(pop))) abort(not(reset_n)) ;

  M_ASSERT_FIFO_INDEX_OVERFLOW_P:
  assume ASSERT_FIFO_INDEX_OVERFLOW_P;
                                                                                                                             
  M_ASSERT_FIFO_INDEX_UNDERFLOW_P:
  assume ASSERT_FIFO_INDEX_UNDERFLOW_P;
                                                                                                                             
  M_ASSERT_FIFO_INDEX_ILLEGAL_PUSH_POP_P:
  assume ASSERT_FIFO_INDEX_ILLEGAL_PUSH_POP_P;

  M_ASSERT_FIFO_INDEX_XZ_ON_PUSH_P:
  assume ASSERT_FIFO_INDEX_XZ_ON_PUSH_P;

  M_ASSERT_FIFO_INDEX_XZ_ON_POP_P:
  assume ASSERT_FIFO_INDEX_XZ_ON_POP_P;
}

library ieee;
use ieee.std_logic_1164.all;
use work.std_ovl.all;
use work.std_ovl_procs.all;

vunit assert_fifo_index_cover_vunit (assert_fifo_index_cover)
{ 
  default clock is rose(clk);
 
  cover_fifo_push:
  cover {((OVL_COVER_BASIC_ON = OVL_COVER_BASIC) or (OVL_COVER_BASIC_ON = OVL_COVER_ALL)) AND (reset_n = '1') AND (or_reduce(push) /= '0')}
  report "COVERAGE REPORT: ASSERT_FIFO_INDEX Checker: Fifo_push_covered";
 
  cover_fifo_pop:
  cover {((OVL_COVER_BASIC_ON = OVL_COVER_BASIC) or (OVL_COVER_BASIC_ON = OVL_COVER_ALL)) AND (reset_n = '1') AND (or_reduce(pop) /= '0')}
  report "COVER: ASSERT_FIFO_INDEX Checker report: Fifo pop covered";

  cover_fifo_simultaneous_push_pop:
  cover {((OVL_COVER_CORNER_ON = OVL_COVER_CORNER) or (OVL_COVER_CORNER_ON = OVL_COVER_ALL)) AND (reset_n = '1') AND (or_reduce(push) /= '0') AND (or_reduce(pop) /= '0')}
  report "COVER: ASSERT_FIFO_INDEX Checker report: Fifo simultaneous push pop covered";
 
  cover_fifo_full:
  cover {((OVL_COVER_CORNER_ON = OVL_COVER_CORNER) or (OVL_COVER_CORNER_ON = OVL_COVER_ALL)) AND (reset_n = '1') AND (to_integer(cnt) /= depth);
         (reset_n = '1') AND (to_integer(cnt) = depth)}
  report "COVER: ASSERT_FIFO_INDEX Checker report: Fifo full covered";

  cover_fifo_empty:
  cover {((OVL_COVER_CORNER_ON = OVL_COVER_CORNER) or (OVL_COVER_CORNER_ON = OVL_COVER_ALL)) AND (reset_n = '1') AND (to_integer(cnt) /= 0);
         (reset_n = '1') AND (to_integer(cnt) = 0)}
  report "COVER: ASSERT_FIFO_INDEX Checker report: Fifo empty covered";

}
 
