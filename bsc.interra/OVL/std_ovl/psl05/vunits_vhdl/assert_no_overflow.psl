-- Accellera Standard V2.8.1 Open Verification Library (OVL).
-- Accellera Copyright (c) 2005-2014. All rights reserved.


library ieee;
use ieee.std_logic_1164.all;
use work.std_ovl.all;
use work.std_ovl_procs.all;


vunit assert_no_overflow_assert_vunit (assert_no_overflow_assert)
{

  default clock is rose (clk); 

  property ASSERT_NO_OVERFLOW_P is always (
            ({to_integer(test_expr) = max} |=> 
            {(to_integer(test_expr) > min) AND ( to_integer(test_expr) <= max)})
            abort (not(reset_n)) );
 
  --Property for X/Z checking

  property ASSERT_NO_OVERFLOW_XZ_ON_TEST_EXPR_P is
           always( (xzcheck_enable = 1 )-> not(is_x(test_expr))) abort(not(reset_n)) ;

  A_ASSERT_NO_OVERFLOW_P:
  assert ASSERT_NO_OVERFLOW_P
  report "VIOLATION: ASSERT_NO_OVERFLOW Checker Fires: Test expression changed value from allowed maximum value max to a value in the range max+1 to min";

  A_ASSERT_NO_OVERFLOW_XZ_ON_TEST_EXPR_P:
  assert ASSERT_NO_OVERFLOW_XZ_ON_TEST_EXPR_P
  report "VIOLATION: ASSERT_NO_OVERFLOW Checker Fires: test_expr contains X or Z";

}

vunit assert_no_overflow_assume_vunit (assert_no_overflow_assume)
{
  default clock is rose (clk); 

  property ASSERT_NO_OVERFLOW_P is always (
            ({to_integer(test_expr) = max} |=> 
            {(to_integer(test_expr) > min) AND ( to_integer(test_expr) <= max)})
            abort (not(reset_n)) );
 
  --Property for X/Z checking

  property ASSERT_NO_OVERFLOW_XZ_ON_TEST_EXPR_P is
           always( (xzcheck_enable = 1 )-> not(is_x(test_expr))) abort(not(reset_n)) ;

  M_ASSERT_NO_OVERFLOW_P:
  assume ASSERT_NO_OVERFLOW_P;

  M_ASSERT_NO_OVERFLOW_XZ_ON_TEST_EXPR_P:
  assume ASSERT_NO_OVERFLOW_XZ_ON_TEST_EXPR_P;

}


library ieee;
use ieee.std_logic_1164.all;
use work.std_ovl.all;
use work.std_ovl_procs.all;

vunit assert_no_overflow_cover_vunit (assert_no_overflow_cover)
{ 

  default clock is rose(clk);

  cover_test_expr_at_min:
  cover {((OVL_COVER_CORNER_ON = OVL_COVER_CORNER) or (OVL_COVER_CORNER_ON = OVL_COVER_ALL)) AND (reset_n = '1') AND NOT(stable(test_expr)) AND (to_integer(test_expr) = min)}
  report "COVERAGE REPORT : ASSERT_NO_OVERFLOW Checker: test_expr_at_min covered";

  cover_test_expr_at_max:
  cover {((OVL_COVER_BASIC_ON = OVL_COVER_BASIC) or (OVL_COVER_BASIC_ON = OVL_COVER_ALL)) AND (reset_n = '1') AND NOT(stable(test_expr)) AND (to_integer(test_expr) = max)}
  report "COVERAGE REPORT : ASSERT_NO_OVERFLOW Checker: test_expr_at_max covered";
                                                                                                                                     
}
 
