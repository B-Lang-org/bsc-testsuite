// Accellera Standard V2.8.1 Open Verification Library (OVL).
// Accellera Copyright (c) 2005-2014. All rights reserved.

vunit assert_win_unchange_assert_vunit(assert_win_unchange_assert)
{
  default clock = (posedge clk);

  property ASSERT_WIN_UNCHANGE_P = always (
           ({(start_event && !window);(!(end_event && stable(test_expr)))[*1:inf]} |-> {stable(test_expr)}) 
           abort(!reset_n));

  //Properties for X/Z checking

  property ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P =
           always( xzcheck_enable && (!window) -> !isunknown(start_event)
                  abort(!reset_n) );

  property ASSERT_WIN_UNCHANGE_XZ_ON_TEST_EXPR_P =
           always( (xzcheck_enable && (window || start_event)) -> xzdetect_test_expr
                  abort(!reset_n) );

  property ASSERT_WIN_UNCHANGE_XZ_ON_END_EVENT_P =
           always( xzcheck_enable && window -> !isunknown(end_event)
                  abort(!reset_n) );

  A_ASSERT_WIN_UNCHANGE_P:
  assert ASSERT_WIN_UNCHANGE_P
  report "VIOLATION: ASSERT_WIN_UNCHANGE Checker Fires: Test expression has changed value before the event window closes";

  A_ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P:
  assert ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P
  report "VIOLATION: ASSERT_WIN_UNCHANGE Checker Fires: start_event contains X or Z";

  A_ASSERT_WIN_UNCHANGE_XZ_ON_TEST_EXPR_P:
  assert ASSERT_WIN_UNCHANGE_XZ_ON_TEST_EXPR_P
  report "VIOLATION: ASSERT_WIN_UNCHANGE Checker Fires: test_expr contains X or Z";

  A_ASSERT_WIN_UNCHANGE_XZ_ON_END_EVENT_P:
  assert ASSERT_WIN_UNCHANGE_XZ_ON_END_EVENT_P
  report "VIOLATION: ASSERT_WIN_UNCHANGE Checker Fires: end_event contains X or Z";
}
                                                                                                                                                 
vunit assert_win_unchange_assume_vunit(assert_win_unchange_assume)
{
  default clock = (posedge clk);

  property ASSERT_WIN_UNCHANGE_P = always (
           ({(start_event && !window);(!(end_event && stable(test_expr)))[*1:inf]} |-> {stable(test_expr)}) 
           abort(!reset_n));

  //Properties for X/Z checking

  property ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P =
           always( xzcheck_enable && (!window) -> !isunknown(start_event)
                  abort(!reset_n) );

  property ASSERT_WIN_UNCHANGE_XZ_ON_TEST_EXPR_P =
           always( xzcheck_enable && (window || start_event) ->  xzdetect_test_expr
                  abort(!reset_n) );

  property ASSERT_WIN_UNCHANGE_XZ_ON_END_EVENT_P =
           always( xzcheck_enable && window -> !isunknown(end_event)
                  abort(!reset_n) );

  M_ASSERT_WIN_UNCHANGE_P:
  assume ASSERT_WIN_UNCHANGE_P;

  M_ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P:
  assume ASSERT_WIN_UNCHANGE_XZ_ON_START_EVENT_P;

  M_ASSERT_WIN_UNCHANGE_XZ_ON_TEST_EXPR_P:
  assume ASSERT_WIN_UNCHANGE_XZ_ON_TEST_EXPR_P;

  M_ASSERT_WIN_UNCHANGE_XZ_ON_END_EVENT_P:
  assume ASSERT_WIN_UNCHANGE_XZ_ON_END_EVENT_P;
}
                                                                                                                                                 
vunit assert_win_unchange_cover_vunit (assert_win_unchange_cover)
{
  default clock = (posedge clk);
                                                                                                                                                 
  cover_window_open:
  cover {OVL_COVER_BASIC_ON && reset_n && start_event && !window}
  report "COVERAGE REPORT : ASSERT_WIN_UNCHANGE Checker: window_open covered";
  
  cover_window:
  cover {OVL_COVER_BASIC_ON && reset_n && start_event && !window;(reset_n && !end_event && window)[*];reset_n && end_event && window}
  report "COVERAGE REPORT : ASSERT_WIN_UNCHANGE Checker: window covered";
}

