// Accellera Standard V2.8.1 Open Verification Library (OVL).
// Accellera Copyright (c) 2005-2014. All rights reserved.

vunit assert_one_cold_assert_vunit (assert_one_cold_assert)
{
  default clock = (posedge clk);

  property ASSERT_ONE_COLD_XZ_P = always (
          reset_n && xzcheck_enable ->
          !isunknown(test_expr)); 

  property ASSERT_ONE_COLD_P = always (
          reset_n && (!isunknown(test_expr)) -> 
          ((onehot(~test_expr)) || ((inactive < 2) && (test_expr == {width{inactive_val}})))); //2 is same as `OVL_ONE_COLD

  A_ASSERT_ONE_COLD_XZ_P:
  assert ASSERT_ONE_COLD_XZ_P
  report "VIOLATION: ASSERT_ONE_COLD Checker Fires : test_expr contains X or Z";

  A_ASSERT_ONE_COLD_P:
  assert ASSERT_ONE_COLD_P
  report "VIOLATION: ASSERT_ONE_COLD Checker Fires : Test expression contains more or less than 1 deasserted bits";

}

vunit assert_one_cold_assume_vunit (assert_one_cold_assume)
{
  default clock = (posedge clk);

  property ASSERT_ONE_COLD_XZ_P = always (
          reset_n && xzcheck_enable ->
          !isunknown(test_expr));

  property ASSERT_ONE_COLD_P = always (
          reset_n && (!isunknown(test_expr)) ->
          ((onehot(~test_expr)) || ((inactive < 2) && (test_expr == {width{inactive_val}})))); //2 is same as `OVL_ONE_COLD
 
  M_ASSERT_ONE_COLD_XZ_P:
  assume ASSERT_ONE_COLD_XZ_P;
  
  M_ASSERT_ONE_COLD_P:
  assume ASSERT_ONE_COLD_P;

}

vunit assert_one_cold_cover_vunit (assert_one_cold_cover)
{ 
  default clock = (posedge clk);

  cover_test_expr_change:
  cover {OVL_COVER_SANITY_ON && prev(reset_n) && reset_n && (test_expr != prev(test_expr))}
  report "COVERAGE REPORT : ASSERT_ONE_COLD Checker: test_expr_change covered";

  cover_test_expr_all_zeros:
  cover {OVL_COVER_CORNER_ON && reset_n && (inactive == 0) &&  //0 is same as `OVL_ALL_ZEROS
         rose(test_expr == {width{inactive_val}})}
  report "COVERAGE REPORT : ASSERT_ONE_COLD Checker: test_expr_all_zeros covered";

  cover_test_expr_all_ones:
  cover {OVL_COVER_CORNER_ON && reset_n && (inactive == 1) && //1 is same as `OVL_ALL_ONES
         rose(test_expr == {width{inactive_val}})}
  report "COVERAGE REPORT : ASSERT_ONE_COLD Checker: test_expr_all_ones covered";

  cover_all_one_colds_checked:
  cover {OVL_COVER_CORNER_ON && reset_n && rose(one_colds_checked == {width{1'b0}})}
  report "COVERAGE REPORT: ASSERT_ONE_COLD Checker: all_one_colds_checked covered";
 
}

