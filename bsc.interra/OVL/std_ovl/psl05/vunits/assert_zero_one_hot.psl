// Accellera Standard V2.8.1 Open Verification Library (OVL).
// Accellera Copyright (c) 2005-2014. All rights reserved.

vunit assert_zero_one_hot_assert_vunit (assert_zero_one_hot_assert)
{
  default clock = (posedge clk);

  property ASSERT_ZERO_ONE_HOT_XZ_P = always (
          reset_n && xzcheck_enable ->
          !isunknown(test_expr)); 

  property ASSERT_ZERO_ONE_HOT_P = always (
           reset_n && (!isunknown(test_expr)) ->
           onehot0(test_expr));

  A_ASSERT_ZERO_ONE_HOT_XZ_P:
  assert ASSERT_ZERO_ONE_HOT_XZ_P
  report "VIOLATION: ASSERT_ZERO_ONE_HOT Checker Fires : test_expr contains X or Z";

  A_ASSERT_ZERO_ONE_HOT_P:
  assert ASSERT_ZERO_ONE_HOT_P
  report "VIOLATION: ASSERT_ZERO_ONE_HOT Checker Fires : Test expression contains more than 1 asserted bits";

}

vunit assert_zero_one_hot_assume_vunit (assert_zero_one_hot_assume)
{
  default clock = (posedge clk);

  property ASSERT_ZERO_ONE_HOT_XZ_P = always (
          reset_n && xzcheck_enable ->
          !isunknown(test_expr)); 
  
  property ASSERT_ZERO_ONE_HOT_P = always (
           reset_n && (!isunknown(test_expr)) ->
           onehot0(test_expr));
                                                                                                                           
  M_ASSERT_ZERO_ONE_HOT_XZ_P:
  assume ASSERT_ZERO_ONE_HOT_XZ_P;
                                                                                                                             
  M_ASSERT_ZERO_ONE_HOT_P:
  assume ASSERT_ZERO_ONE_HOT_P;
                                                                                                                             
}

vunit assert_zero_one_hot_cover_vunit (assert_zero_one_hot_cover)
{ 
  default clock = (posedge clk);

  cover_test_expr_change:
  cover {OVL_COVER_SANITY_ON && prev(reset_n) && reset_n && (test_expr != prev(test_expr))}
  report "COVERAGE REPORT : ASSERT_ZERO_ONE_HOT Checker: test_expr_change covered";

  cover_test_expr_all_zeros:
  cover {OVL_COVER_CORNER_ON && reset_n && rose(test_expr == {width{1'b0}})}
  report "COVERAGE REPORT : ASSERT_ZERO_ONE_HOT Checker: test_expr_all_zeros covered";
 
  cover_all_one_hots_checked:
  cover {OVL_COVER_CORNER_ON && reset_n && rose(all_one_hots_checked)}
  report "COVERAGE REPORT: ASSERT_ZERO_ONE_HOT Checker: all_one_hots_checked covered";
 
} 

