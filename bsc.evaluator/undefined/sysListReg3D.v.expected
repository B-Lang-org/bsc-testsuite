//
// Generated by Bluespec Compiler
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module sysListReg3D(CLK,
		    RST_N);
  input  CLK;
  input  RST_N;

  // register i
  reg [7 : 0] i;
  wire [7 : 0] i$D_IN;
  wire i$EN;

  // register j
  reg [7 : 0] j;
  wire [7 : 0] j$D_IN;
  wire j$EN;

  // register k
  reg [7 : 0] k;
  wire [7 : 0] k$D_IN;
  wire k$EN;

  // register ls_0_0_0
  reg [7 : 0] ls_0_0_0;
  wire [7 : 0] ls_0_0_0$D_IN;
  wire ls_0_0_0$EN;

  // register ls_0_0_1
  reg [7 : 0] ls_0_0_1;
  wire [7 : 0] ls_0_0_1$D_IN;
  wire ls_0_0_1$EN;

  // register ls_0_0_2
  reg [7 : 0] ls_0_0_2;
  wire [7 : 0] ls_0_0_2$D_IN;
  wire ls_0_0_2$EN;

  // register ls_0_0_3
  reg [7 : 0] ls_0_0_3;
  wire [7 : 0] ls_0_0_3$D_IN;
  wire ls_0_0_3$EN;

  // register ls_0_1_0
  reg [7 : 0] ls_0_1_0;
  wire [7 : 0] ls_0_1_0$D_IN;
  wire ls_0_1_0$EN;

  // register ls_0_1_1
  reg [7 : 0] ls_0_1_1;
  wire [7 : 0] ls_0_1_1$D_IN;
  wire ls_0_1_1$EN;

  // register ls_0_1_2
  reg [7 : 0] ls_0_1_2;
  wire [7 : 0] ls_0_1_2$D_IN;
  wire ls_0_1_2$EN;

  // register ls_0_1_3
  reg [7 : 0] ls_0_1_3;
  wire [7 : 0] ls_0_1_3$D_IN;
  wire ls_0_1_3$EN;

  // register ls_0_2_0
  reg [7 : 0] ls_0_2_0;
  wire [7 : 0] ls_0_2_0$D_IN;
  wire ls_0_2_0$EN;

  // register ls_0_2_1
  reg [7 : 0] ls_0_2_1;
  wire [7 : 0] ls_0_2_1$D_IN;
  wire ls_0_2_1$EN;

  // register ls_0_2_2
  reg [7 : 0] ls_0_2_2;
  wire [7 : 0] ls_0_2_2$D_IN;
  wire ls_0_2_2$EN;

  // register ls_0_2_3
  reg [7 : 0] ls_0_2_3;
  wire [7 : 0] ls_0_2_3$D_IN;
  wire ls_0_2_3$EN;

  // register ls_0_3_0
  reg [7 : 0] ls_0_3_0;
  wire [7 : 0] ls_0_3_0$D_IN;
  wire ls_0_3_0$EN;

  // register ls_0_3_1
  reg [7 : 0] ls_0_3_1;
  wire [7 : 0] ls_0_3_1$D_IN;
  wire ls_0_3_1$EN;

  // register ls_0_3_2
  reg [7 : 0] ls_0_3_2;
  wire [7 : 0] ls_0_3_2$D_IN;
  wire ls_0_3_2$EN;

  // register ls_0_3_3
  reg [7 : 0] ls_0_3_3;
  wire [7 : 0] ls_0_3_3$D_IN;
  wire ls_0_3_3$EN;

  // register ls_1_0_0
  reg [7 : 0] ls_1_0_0;
  wire [7 : 0] ls_1_0_0$D_IN;
  wire ls_1_0_0$EN;

  // register ls_1_0_1
  reg [7 : 0] ls_1_0_1;
  wire [7 : 0] ls_1_0_1$D_IN;
  wire ls_1_0_1$EN;

  // register ls_1_0_2
  reg [7 : 0] ls_1_0_2;
  wire [7 : 0] ls_1_0_2$D_IN;
  wire ls_1_0_2$EN;

  // register ls_1_0_3
  reg [7 : 0] ls_1_0_3;
  wire [7 : 0] ls_1_0_3$D_IN;
  wire ls_1_0_3$EN;

  // register ls_1_1_0
  reg [7 : 0] ls_1_1_0;
  wire [7 : 0] ls_1_1_0$D_IN;
  wire ls_1_1_0$EN;

  // register ls_1_1_1
  reg [7 : 0] ls_1_1_1;
  wire [7 : 0] ls_1_1_1$D_IN;
  wire ls_1_1_1$EN;

  // register ls_1_1_2
  reg [7 : 0] ls_1_1_2;
  wire [7 : 0] ls_1_1_2$D_IN;
  wire ls_1_1_2$EN;

  // register ls_1_1_3
  reg [7 : 0] ls_1_1_3;
  wire [7 : 0] ls_1_1_3$D_IN;
  wire ls_1_1_3$EN;

  // register ls_1_2_0
  reg [7 : 0] ls_1_2_0;
  wire [7 : 0] ls_1_2_0$D_IN;
  wire ls_1_2_0$EN;

  // register ls_1_2_1
  reg [7 : 0] ls_1_2_1;
  wire [7 : 0] ls_1_2_1$D_IN;
  wire ls_1_2_1$EN;

  // register ls_1_2_2
  reg [7 : 0] ls_1_2_2;
  wire [7 : 0] ls_1_2_2$D_IN;
  wire ls_1_2_2$EN;

  // register ls_1_2_3
  reg [7 : 0] ls_1_2_3;
  wire [7 : 0] ls_1_2_3$D_IN;
  wire ls_1_2_3$EN;

  // register ls_1_3_0
  reg [7 : 0] ls_1_3_0;
  wire [7 : 0] ls_1_3_0$D_IN;
  wire ls_1_3_0$EN;

  // register ls_1_3_1
  reg [7 : 0] ls_1_3_1;
  wire [7 : 0] ls_1_3_1$D_IN;
  wire ls_1_3_1$EN;

  // register ls_1_3_2
  reg [7 : 0] ls_1_3_2;
  wire [7 : 0] ls_1_3_2$D_IN;
  wire ls_1_3_2$EN;

  // register ls_1_3_3
  reg [7 : 0] ls_1_3_3;
  wire [7 : 0] ls_1_3_3$D_IN;
  wire ls_1_3_3$EN;

  // register ls_2_0_0
  reg [7 : 0] ls_2_0_0;
  wire [7 : 0] ls_2_0_0$D_IN;
  wire ls_2_0_0$EN;

  // register ls_2_0_1
  reg [7 : 0] ls_2_0_1;
  wire [7 : 0] ls_2_0_1$D_IN;
  wire ls_2_0_1$EN;

  // register ls_2_0_2
  reg [7 : 0] ls_2_0_2;
  wire [7 : 0] ls_2_0_2$D_IN;
  wire ls_2_0_2$EN;

  // register ls_2_0_3
  reg [7 : 0] ls_2_0_3;
  wire [7 : 0] ls_2_0_3$D_IN;
  wire ls_2_0_3$EN;

  // register ls_2_1_0
  reg [7 : 0] ls_2_1_0;
  wire [7 : 0] ls_2_1_0$D_IN;
  wire ls_2_1_0$EN;

  // register ls_2_1_1
  reg [7 : 0] ls_2_1_1;
  wire [7 : 0] ls_2_1_1$D_IN;
  wire ls_2_1_1$EN;

  // register ls_2_1_2
  reg [7 : 0] ls_2_1_2;
  wire [7 : 0] ls_2_1_2$D_IN;
  wire ls_2_1_2$EN;

  // register ls_2_1_3
  reg [7 : 0] ls_2_1_3;
  wire [7 : 0] ls_2_1_3$D_IN;
  wire ls_2_1_3$EN;

  // register ls_2_2_0
  reg [7 : 0] ls_2_2_0;
  wire [7 : 0] ls_2_2_0$D_IN;
  wire ls_2_2_0$EN;

  // register ls_2_2_1
  reg [7 : 0] ls_2_2_1;
  wire [7 : 0] ls_2_2_1$D_IN;
  wire ls_2_2_1$EN;

  // register ls_2_2_2
  reg [7 : 0] ls_2_2_2;
  wire [7 : 0] ls_2_2_2$D_IN;
  wire ls_2_2_2$EN;

  // register ls_2_2_3
  reg [7 : 0] ls_2_2_3;
  wire [7 : 0] ls_2_2_3$D_IN;
  wire ls_2_2_3$EN;

  // register ls_2_3_0
  reg [7 : 0] ls_2_3_0;
  wire [7 : 0] ls_2_3_0$D_IN;
  wire ls_2_3_0$EN;

  // register ls_2_3_1
  reg [7 : 0] ls_2_3_1;
  wire [7 : 0] ls_2_3_1$D_IN;
  wire ls_2_3_1$EN;

  // register ls_2_3_2
  reg [7 : 0] ls_2_3_2;
  wire [7 : 0] ls_2_3_2$D_IN;
  wire ls_2_3_2$EN;

  // register ls_2_3_3
  reg [7 : 0] ls_2_3_3;
  wire [7 : 0] ls_2_3_3$D_IN;
  wire ls_2_3_3$EN;

  // register ls_3_0_0
  reg [7 : 0] ls_3_0_0;
  wire [7 : 0] ls_3_0_0$D_IN;
  wire ls_3_0_0$EN;

  // register ls_3_0_1
  reg [7 : 0] ls_3_0_1;
  wire [7 : 0] ls_3_0_1$D_IN;
  wire ls_3_0_1$EN;

  // register ls_3_0_2
  reg [7 : 0] ls_3_0_2;
  wire [7 : 0] ls_3_0_2$D_IN;
  wire ls_3_0_2$EN;

  // register ls_3_0_3
  reg [7 : 0] ls_3_0_3;
  wire [7 : 0] ls_3_0_3$D_IN;
  wire ls_3_0_3$EN;

  // register ls_3_1_0
  reg [7 : 0] ls_3_1_0;
  wire [7 : 0] ls_3_1_0$D_IN;
  wire ls_3_1_0$EN;

  // register ls_3_1_1
  reg [7 : 0] ls_3_1_1;
  wire [7 : 0] ls_3_1_1$D_IN;
  wire ls_3_1_1$EN;

  // register ls_3_1_2
  reg [7 : 0] ls_3_1_2;
  wire [7 : 0] ls_3_1_2$D_IN;
  wire ls_3_1_2$EN;

  // register ls_3_1_3
  reg [7 : 0] ls_3_1_3;
  wire [7 : 0] ls_3_1_3$D_IN;
  wire ls_3_1_3$EN;

  // register ls_3_2_0
  reg [7 : 0] ls_3_2_0;
  wire [7 : 0] ls_3_2_0$D_IN;
  wire ls_3_2_0$EN;

  // register ls_3_2_1
  reg [7 : 0] ls_3_2_1;
  wire [7 : 0] ls_3_2_1$D_IN;
  wire ls_3_2_1$EN;

  // register ls_3_2_2
  reg [7 : 0] ls_3_2_2;
  wire [7 : 0] ls_3_2_2$D_IN;
  wire ls_3_2_2$EN;

  // register ls_3_2_3
  reg [7 : 0] ls_3_2_3;
  wire [7 : 0] ls_3_2_3$D_IN;
  wire ls_3_2_3$EN;

  // register ls_3_3_0
  reg [7 : 0] ls_3_3_0;
  wire [7 : 0] ls_3_3_0$D_IN;
  wire ls_3_3_0$EN;

  // register ls_3_3_1
  reg [7 : 0] ls_3_3_1;
  wire [7 : 0] ls_3_3_1$D_IN;
  wire ls_3_3_1$EN;

  // register ls_3_3_2
  reg [7 : 0] ls_3_3_2;
  wire [7 : 0] ls_3_3_2$D_IN;
  wire ls_3_3_2$EN;

  // register ls_3_3_3
  reg [7 : 0] ls_3_3_3;
  wire [7 : 0] ls_3_3_3$D_IN;
  wire ls_3_3_3$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_tick, WILL_FIRE_RL_write;

  // remaining internal signals
  reg [7 : 0] IF_i_44_EQ_0_45_THEN_ls_0_0_0_ELSE_IF_i_44_EQ__ETC___d165,
	      IF_i_44_EQ_0_45_THEN_ls_0_0_1_ELSE_IF_i_44_EQ__ETC___d186,
	      IF_i_44_EQ_0_45_THEN_ls_0_0_2_0_ELSE_IF_i_44_E_ETC___d207,
	      IF_i_44_EQ_0_45_THEN_ls_0_0_3_3_ELSE_IF_i_44_E_ETC___d228,
	      IF_i_44_EQ_0_45_THEN_ls_0_1_0_5_ELSE_IF_i_44_E_ETC___d169,
	      IF_i_44_EQ_0_45_THEN_ls_0_1_1_7_ELSE_IF_i_44_E_ETC___d190,
	      IF_i_44_EQ_0_45_THEN_ls_0_1_2_9_ELSE_IF_i_44_E_ETC___d211,
	      IF_i_44_EQ_0_45_THEN_ls_0_1_3_1_ELSE_IF_i_44_E_ETC___d232,
	      IF_i_44_EQ_0_45_THEN_ls_0_2_0_3_ELSE_IF_i_44_E_ETC___d173,
	      IF_i_44_EQ_0_45_THEN_ls_0_2_1_5_ELSE_IF_i_44_E_ETC___d194,
	      IF_i_44_EQ_0_45_THEN_ls_0_2_2_7_ELSE_IF_i_44_E_ETC___d215,
	      IF_i_44_EQ_0_45_THEN_ls_0_2_3_0_ELSE_IF_i_44_E_ETC___d236,
	      IF_i_44_EQ_0_45_THEN_ls_0_3_0_3_ELSE_IF_i_44_E_ETC___d177,
	      IF_i_44_EQ_0_45_THEN_ls_0_3_1_5_ELSE_IF_i_44_E_ETC___d198,
	      IF_i_44_EQ_0_45_THEN_ls_0_3_2_7_ELSE_IF_i_44_E_ETC___d219,
	      IF_i_44_EQ_0_45_THEN_ls_0_3_3_9_ELSE_IF_i_44_E_ETC___d240,
	      IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d181,
	      IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d202,
	      IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d223,
	      IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d244,
	      IF_k_EQ_0_61_THEN_IF_j_52_EQ_0_53_THEN_IF_i_44_ETC___d248;
  wire [15 : 0] j_52_MUL_k___d261;

  // rule RL_write
  assign WILL_FIRE_RL_write = i < 8'd4 && j < 8'd4 && k < 8'd4 ;

  // rule RL_tick
  assign WILL_FIRE_RL_tick = k < 8'd4 ;

  // register i
  assign i$D_IN = (i == 8'd3) ? 8'd0 : i + 8'd1 ;
  assign i$EN = WILL_FIRE_RL_tick ;

  // register j
  assign j$D_IN = (j == 8'd3) ? 8'd0 : j + 8'd1 ;
  assign j$EN = WILL_FIRE_RL_tick && i == 8'd3 ;

  // register k
  assign k$D_IN = k + 8'd1 ;
  assign k$EN = WILL_FIRE_RL_tick && i == 8'd3 && j == 8'd3 ;

  // register ls_0_0_0
  assign ls_0_0_0$D_IN = i + j_52_MUL_k___d261[7:0] ;
  assign ls_0_0_0$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd0 && k == 8'd0 ;

  // register ls_0_0_1
  assign ls_0_0_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_0_1$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd0 && k == 8'd1 ;

  // register ls_0_0_2
  assign ls_0_0_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_0_2$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd0 && k == 8'd2 ;

  // register ls_0_0_3
  assign ls_0_0_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_0_3$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd0 && k == 8'd3 ;

  // register ls_0_1_0
  assign ls_0_1_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_1_0$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd1 && k == 8'd0 ;

  // register ls_0_1_1
  assign ls_0_1_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_1_1$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd1 && k == 8'd1 ;

  // register ls_0_1_2
  assign ls_0_1_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_1_2$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd1 && k == 8'd2 ;

  // register ls_0_1_3
  assign ls_0_1_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_1_3$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd1 && k == 8'd3 ;

  // register ls_0_2_0
  assign ls_0_2_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_2_0$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd2 && k == 8'd0 ;

  // register ls_0_2_1
  assign ls_0_2_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_2_1$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd2 && k == 8'd1 ;

  // register ls_0_2_2
  assign ls_0_2_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_2_2$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd2 && k == 8'd2 ;

  // register ls_0_2_3
  assign ls_0_2_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_2_3$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd2 && k == 8'd3 ;

  // register ls_0_3_0
  assign ls_0_3_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_3_0$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd3 && k == 8'd0 ;

  // register ls_0_3_1
  assign ls_0_3_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_3_1$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd3 && k == 8'd1 ;

  // register ls_0_3_2
  assign ls_0_3_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_3_2$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd3 && k == 8'd2 ;

  // register ls_0_3_3
  assign ls_0_3_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_0_3_3$EN =
	     WILL_FIRE_RL_write && i == 8'd0 && j == 8'd3 && k == 8'd3 ;

  // register ls_1_0_0
  assign ls_1_0_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_0_0$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd0 && k == 8'd0 ;

  // register ls_1_0_1
  assign ls_1_0_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_0_1$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd0 && k == 8'd1 ;

  // register ls_1_0_2
  assign ls_1_0_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_0_2$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd0 && k == 8'd2 ;

  // register ls_1_0_3
  assign ls_1_0_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_0_3$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd0 && k == 8'd3 ;

  // register ls_1_1_0
  assign ls_1_1_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_1_0$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd1 && k == 8'd0 ;

  // register ls_1_1_1
  assign ls_1_1_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_1_1$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd1 && k == 8'd1 ;

  // register ls_1_1_2
  assign ls_1_1_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_1_2$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd1 && k == 8'd2 ;

  // register ls_1_1_3
  assign ls_1_1_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_1_3$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd1 && k == 8'd3 ;

  // register ls_1_2_0
  assign ls_1_2_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_2_0$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd2 && k == 8'd0 ;

  // register ls_1_2_1
  assign ls_1_2_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_2_1$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd2 && k == 8'd1 ;

  // register ls_1_2_2
  assign ls_1_2_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_2_2$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd2 && k == 8'd2 ;

  // register ls_1_2_3
  assign ls_1_2_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_2_3$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd2 && k == 8'd3 ;

  // register ls_1_3_0
  assign ls_1_3_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_3_0$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd3 && k == 8'd0 ;

  // register ls_1_3_1
  assign ls_1_3_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_3_1$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd3 && k == 8'd1 ;

  // register ls_1_3_2
  assign ls_1_3_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_3_2$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd3 && k == 8'd2 ;

  // register ls_1_3_3
  assign ls_1_3_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_1_3_3$EN =
	     WILL_FIRE_RL_write && i == 8'd1 && j == 8'd3 && k == 8'd3 ;

  // register ls_2_0_0
  assign ls_2_0_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_0_0$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd0 && k == 8'd0 ;

  // register ls_2_0_1
  assign ls_2_0_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_0_1$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd0 && k == 8'd1 ;

  // register ls_2_0_2
  assign ls_2_0_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_0_2$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd0 && k == 8'd2 ;

  // register ls_2_0_3
  assign ls_2_0_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_0_3$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd0 && k == 8'd3 ;

  // register ls_2_1_0
  assign ls_2_1_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_1_0$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd1 && k == 8'd0 ;

  // register ls_2_1_1
  assign ls_2_1_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_1_1$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd1 && k == 8'd1 ;

  // register ls_2_1_2
  assign ls_2_1_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_1_2$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd1 && k == 8'd2 ;

  // register ls_2_1_3
  assign ls_2_1_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_1_3$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd1 && k == 8'd3 ;

  // register ls_2_2_0
  assign ls_2_2_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_2_0$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd2 && k == 8'd0 ;

  // register ls_2_2_1
  assign ls_2_2_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_2_1$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd2 && k == 8'd1 ;

  // register ls_2_2_2
  assign ls_2_2_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_2_2$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd2 && k == 8'd2 ;

  // register ls_2_2_3
  assign ls_2_2_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_2_3$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd2 && k == 8'd3 ;

  // register ls_2_3_0
  assign ls_2_3_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_3_0$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd3 && k == 8'd0 ;

  // register ls_2_3_1
  assign ls_2_3_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_3_1$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd3 && k == 8'd1 ;

  // register ls_2_3_2
  assign ls_2_3_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_3_2$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd3 && k == 8'd2 ;

  // register ls_2_3_3
  assign ls_2_3_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_2_3_3$EN =
	     WILL_FIRE_RL_write && i == 8'd2 && j == 8'd3 && k == 8'd3 ;

  // register ls_3_0_0
  assign ls_3_0_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_0_0$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd0 && k == 8'd0 ;

  // register ls_3_0_1
  assign ls_3_0_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_0_1$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd0 && k == 8'd1 ;

  // register ls_3_0_2
  assign ls_3_0_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_0_2$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd0 && k == 8'd2 ;

  // register ls_3_0_3
  assign ls_3_0_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_0_3$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd0 && k == 8'd3 ;

  // register ls_3_1_0
  assign ls_3_1_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_1_0$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd1 && k == 8'd0 ;

  // register ls_3_1_1
  assign ls_3_1_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_1_1$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd1 && k == 8'd1 ;

  // register ls_3_1_2
  assign ls_3_1_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_1_2$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd1 && k == 8'd2 ;

  // register ls_3_1_3
  assign ls_3_1_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_1_3$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd1 && k == 8'd3 ;

  // register ls_3_2_0
  assign ls_3_2_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_2_0$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd2 && k == 8'd0 ;

  // register ls_3_2_1
  assign ls_3_2_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_2_1$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd2 && k == 8'd1 ;

  // register ls_3_2_2
  assign ls_3_2_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_2_2$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd2 && k == 8'd2 ;

  // register ls_3_2_3
  assign ls_3_2_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_2_3$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd2 && k == 8'd3 ;

  // register ls_3_3_0
  assign ls_3_3_0$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_3_0$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd3 && k == 8'd0 ;

  // register ls_3_3_1
  assign ls_3_3_1$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_3_1$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd3 && k == 8'd1 ;

  // register ls_3_3_2
  assign ls_3_3_2$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_3_2$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd3 && k == 8'd2 ;

  // register ls_3_3_3
  assign ls_3_3_3$D_IN = ls_0_0_0$D_IN ;
  assign ls_3_3_3$EN =
	     WILL_FIRE_RL_write && i == 8'd3 && j == 8'd3 && k == 8'd3 ;

  // remaining internal signals
  assign j_52_MUL_k___d261 = j * k ;
  always@(i or ls_3_3_1 or ls_0_3_1 or ls_1_3_1 or ls_2_3_1)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_1_5_ELSE_IF_i_44_E_ETC___d198 =
	      ls_0_3_1;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_1_5_ELSE_IF_i_44_E_ETC___d198 =
	      ls_1_3_1;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_1_5_ELSE_IF_i_44_E_ETC___d198 =
	      ls_2_3_1;
      default: IF_i_44_EQ_0_45_THEN_ls_0_3_1_5_ELSE_IF_i_44_E_ETC___d198 =
		   ls_3_3_1;
    endcase
  end
  always@(i or ls_3_3_0 or ls_0_3_0 or ls_1_3_0 or ls_2_3_0)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_0_3_ELSE_IF_i_44_E_ETC___d177 =
	      ls_0_3_0;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_0_3_ELSE_IF_i_44_E_ETC___d177 =
	      ls_1_3_0;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_0_3_ELSE_IF_i_44_E_ETC___d177 =
	      ls_2_3_0;
      default: IF_i_44_EQ_0_45_THEN_ls_0_3_0_3_ELSE_IF_i_44_E_ETC___d177 =
		   ls_3_3_0;
    endcase
  end
  always@(i or ls_3_2_1 or ls_0_2_1 or ls_1_2_1 or ls_2_2_1)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_1_5_ELSE_IF_i_44_E_ETC___d194 =
	      ls_0_2_1;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_1_5_ELSE_IF_i_44_E_ETC___d194 =
	      ls_1_2_1;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_1_5_ELSE_IF_i_44_E_ETC___d194 =
	      ls_2_2_1;
      default: IF_i_44_EQ_0_45_THEN_ls_0_2_1_5_ELSE_IF_i_44_E_ETC___d194 =
		   ls_3_2_1;
    endcase
  end
  always@(i or ls_3_2_0 or ls_0_2_0 or ls_1_2_0 or ls_2_2_0)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_0_3_ELSE_IF_i_44_E_ETC___d173 =
	      ls_0_2_0;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_0_3_ELSE_IF_i_44_E_ETC___d173 =
	      ls_1_2_0;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_0_3_ELSE_IF_i_44_E_ETC___d173 =
	      ls_2_2_0;
      default: IF_i_44_EQ_0_45_THEN_ls_0_2_0_3_ELSE_IF_i_44_E_ETC___d173 =
		   ls_3_2_0;
    endcase
  end
  always@(i or ls_3_1_1 or ls_0_1_1 or ls_1_1_1 or ls_2_1_1)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_1_7_ELSE_IF_i_44_E_ETC___d190 =
	      ls_0_1_1;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_1_7_ELSE_IF_i_44_E_ETC___d190 =
	      ls_1_1_1;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_1_7_ELSE_IF_i_44_E_ETC___d190 =
	      ls_2_1_1;
      default: IF_i_44_EQ_0_45_THEN_ls_0_1_1_7_ELSE_IF_i_44_E_ETC___d190 =
		   ls_3_1_1;
    endcase
  end
  always@(i or ls_3_1_0 or ls_0_1_0 or ls_1_1_0 or ls_2_1_0)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_0_5_ELSE_IF_i_44_E_ETC___d169 =
	      ls_0_1_0;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_0_5_ELSE_IF_i_44_E_ETC___d169 =
	      ls_1_1_0;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_0_5_ELSE_IF_i_44_E_ETC___d169 =
	      ls_2_1_0;
      default: IF_i_44_EQ_0_45_THEN_ls_0_1_0_5_ELSE_IF_i_44_E_ETC___d169 =
		   ls_3_1_0;
    endcase
  end
  always@(i or ls_3_0_1 or ls_0_0_1 or ls_1_0_1 or ls_2_0_1)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_1_ELSE_IF_i_44_EQ__ETC___d186 =
	      ls_0_0_1;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_1_ELSE_IF_i_44_EQ__ETC___d186 =
	      ls_1_0_1;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_1_ELSE_IF_i_44_EQ__ETC___d186 =
	      ls_2_0_1;
      default: IF_i_44_EQ_0_45_THEN_ls_0_0_1_ELSE_IF_i_44_EQ__ETC___d186 =
		   ls_3_0_1;
    endcase
  end
  always@(i or ls_3_0_0 or ls_0_0_0 or ls_1_0_0 or ls_2_0_0)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_0_ELSE_IF_i_44_EQ__ETC___d165 =
	      ls_0_0_0;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_0_ELSE_IF_i_44_EQ__ETC___d165 =
	      ls_1_0_0;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_0_ELSE_IF_i_44_EQ__ETC___d165 =
	      ls_2_0_0;
      default: IF_i_44_EQ_0_45_THEN_ls_0_0_0_ELSE_IF_i_44_EQ__ETC___d165 =
		   ls_3_0_0;
    endcase
  end
  always@(i or ls_3_3_2 or ls_0_3_2 or ls_1_3_2 or ls_2_3_2)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_2_7_ELSE_IF_i_44_E_ETC___d219 =
	      ls_0_3_2;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_2_7_ELSE_IF_i_44_E_ETC___d219 =
	      ls_1_3_2;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_2_7_ELSE_IF_i_44_E_ETC___d219 =
	      ls_2_3_2;
      default: IF_i_44_EQ_0_45_THEN_ls_0_3_2_7_ELSE_IF_i_44_E_ETC___d219 =
		   ls_3_3_2;
    endcase
  end
  always@(i or ls_3_2_2 or ls_0_2_2 or ls_1_2_2 or ls_2_2_2)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_2_7_ELSE_IF_i_44_E_ETC___d215 =
	      ls_0_2_2;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_2_7_ELSE_IF_i_44_E_ETC___d215 =
	      ls_1_2_2;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_2_7_ELSE_IF_i_44_E_ETC___d215 =
	      ls_2_2_2;
      default: IF_i_44_EQ_0_45_THEN_ls_0_2_2_7_ELSE_IF_i_44_E_ETC___d215 =
		   ls_3_2_2;
    endcase
  end
  always@(i or ls_3_1_2 or ls_0_1_2 or ls_1_1_2 or ls_2_1_2)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_2_9_ELSE_IF_i_44_E_ETC___d211 =
	      ls_0_1_2;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_2_9_ELSE_IF_i_44_E_ETC___d211 =
	      ls_1_1_2;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_2_9_ELSE_IF_i_44_E_ETC___d211 =
	      ls_2_1_2;
      default: IF_i_44_EQ_0_45_THEN_ls_0_1_2_9_ELSE_IF_i_44_E_ETC___d211 =
		   ls_3_1_2;
    endcase
  end
  always@(i or ls_3_3_3 or ls_0_3_3 or ls_1_3_3 or ls_2_3_3)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_3_9_ELSE_IF_i_44_E_ETC___d240 =
	      ls_0_3_3;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_3_9_ELSE_IF_i_44_E_ETC___d240 =
	      ls_1_3_3;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_3_3_9_ELSE_IF_i_44_E_ETC___d240 =
	      ls_2_3_3;
      default: IF_i_44_EQ_0_45_THEN_ls_0_3_3_9_ELSE_IF_i_44_E_ETC___d240 =
		   ls_3_3_3;
    endcase
  end
  always@(i or ls_3_0_2 or ls_0_0_2 or ls_1_0_2 or ls_2_0_2)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_2_0_ELSE_IF_i_44_E_ETC___d207 =
	      ls_0_0_2;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_2_0_ELSE_IF_i_44_E_ETC___d207 =
	      ls_1_0_2;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_2_0_ELSE_IF_i_44_E_ETC___d207 =
	      ls_2_0_2;
      default: IF_i_44_EQ_0_45_THEN_ls_0_0_2_0_ELSE_IF_i_44_E_ETC___d207 =
		   ls_3_0_2;
    endcase
  end
  always@(i or ls_3_2_3 or ls_0_2_3 or ls_1_2_3 or ls_2_2_3)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_3_0_ELSE_IF_i_44_E_ETC___d236 =
	      ls_0_2_3;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_3_0_ELSE_IF_i_44_E_ETC___d236 =
	      ls_1_2_3;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_2_3_0_ELSE_IF_i_44_E_ETC___d236 =
	      ls_2_2_3;
      default: IF_i_44_EQ_0_45_THEN_ls_0_2_3_0_ELSE_IF_i_44_E_ETC___d236 =
		   ls_3_2_3;
    endcase
  end
  always@(i or ls_3_1_3 or ls_0_1_3 or ls_1_1_3 or ls_2_1_3)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_3_1_ELSE_IF_i_44_E_ETC___d232 =
	      ls_0_1_3;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_3_1_ELSE_IF_i_44_E_ETC___d232 =
	      ls_1_1_3;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_1_3_1_ELSE_IF_i_44_E_ETC___d232 =
	      ls_2_1_3;
      default: IF_i_44_EQ_0_45_THEN_ls_0_1_3_1_ELSE_IF_i_44_E_ETC___d232 =
		   ls_3_1_3;
    endcase
  end
  always@(i or ls_3_0_3 or ls_0_0_3 or ls_1_0_3 or ls_2_0_3)
  begin
    case (i)
      8'd0:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_3_3_ELSE_IF_i_44_E_ETC___d228 =
	      ls_0_0_3;
      8'd1:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_3_3_ELSE_IF_i_44_E_ETC___d228 =
	      ls_1_0_3;
      8'd2:
	  IF_i_44_EQ_0_45_THEN_ls_0_0_3_3_ELSE_IF_i_44_E_ETC___d228 =
	      ls_2_0_3;
      default: IF_i_44_EQ_0_45_THEN_ls_0_0_3_3_ELSE_IF_i_44_E_ETC___d228 =
		   ls_3_0_3;
    endcase
  end
  always@(j or
	  IF_i_44_EQ_0_45_THEN_ls_0_3_0_3_ELSE_IF_i_44_E_ETC___d177 or
	  IF_i_44_EQ_0_45_THEN_ls_0_0_0_ELSE_IF_i_44_EQ__ETC___d165 or
	  IF_i_44_EQ_0_45_THEN_ls_0_1_0_5_ELSE_IF_i_44_E_ETC___d169 or
	  IF_i_44_EQ_0_45_THEN_ls_0_2_0_3_ELSE_IF_i_44_E_ETC___d173)
  begin
    case (j)
      8'd0:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d181 =
	      IF_i_44_EQ_0_45_THEN_ls_0_0_0_ELSE_IF_i_44_EQ__ETC___d165;
      8'd1:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d181 =
	      IF_i_44_EQ_0_45_THEN_ls_0_1_0_5_ELSE_IF_i_44_E_ETC___d169;
      8'd2:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d181 =
	      IF_i_44_EQ_0_45_THEN_ls_0_2_0_3_ELSE_IF_i_44_E_ETC___d173;
      default: IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d181 =
		   IF_i_44_EQ_0_45_THEN_ls_0_3_0_3_ELSE_IF_i_44_E_ETC___d177;
    endcase
  end
  always@(j or
	  IF_i_44_EQ_0_45_THEN_ls_0_3_1_5_ELSE_IF_i_44_E_ETC___d198 or
	  IF_i_44_EQ_0_45_THEN_ls_0_0_1_ELSE_IF_i_44_EQ__ETC___d186 or
	  IF_i_44_EQ_0_45_THEN_ls_0_1_1_7_ELSE_IF_i_44_E_ETC___d190 or
	  IF_i_44_EQ_0_45_THEN_ls_0_2_1_5_ELSE_IF_i_44_E_ETC___d194)
  begin
    case (j)
      8'd0:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d202 =
	      IF_i_44_EQ_0_45_THEN_ls_0_0_1_ELSE_IF_i_44_EQ__ETC___d186;
      8'd1:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d202 =
	      IF_i_44_EQ_0_45_THEN_ls_0_1_1_7_ELSE_IF_i_44_E_ETC___d190;
      8'd2:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d202 =
	      IF_i_44_EQ_0_45_THEN_ls_0_2_1_5_ELSE_IF_i_44_E_ETC___d194;
      default: IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d202 =
		   IF_i_44_EQ_0_45_THEN_ls_0_3_1_5_ELSE_IF_i_44_E_ETC___d198;
    endcase
  end
  always@(j or
	  IF_i_44_EQ_0_45_THEN_ls_0_3_2_7_ELSE_IF_i_44_E_ETC___d219 or
	  IF_i_44_EQ_0_45_THEN_ls_0_0_2_0_ELSE_IF_i_44_E_ETC___d207 or
	  IF_i_44_EQ_0_45_THEN_ls_0_1_2_9_ELSE_IF_i_44_E_ETC___d211 or
	  IF_i_44_EQ_0_45_THEN_ls_0_2_2_7_ELSE_IF_i_44_E_ETC___d215)
  begin
    case (j)
      8'd0:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d223 =
	      IF_i_44_EQ_0_45_THEN_ls_0_0_2_0_ELSE_IF_i_44_E_ETC___d207;
      8'd1:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d223 =
	      IF_i_44_EQ_0_45_THEN_ls_0_1_2_9_ELSE_IF_i_44_E_ETC___d211;
      8'd2:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d223 =
	      IF_i_44_EQ_0_45_THEN_ls_0_2_2_7_ELSE_IF_i_44_E_ETC___d215;
      default: IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d223 =
		   IF_i_44_EQ_0_45_THEN_ls_0_3_2_7_ELSE_IF_i_44_E_ETC___d219;
    endcase
  end
  always@(j or
	  IF_i_44_EQ_0_45_THEN_ls_0_3_3_9_ELSE_IF_i_44_E_ETC___d240 or
	  IF_i_44_EQ_0_45_THEN_ls_0_0_3_3_ELSE_IF_i_44_E_ETC___d228 or
	  IF_i_44_EQ_0_45_THEN_ls_0_1_3_1_ELSE_IF_i_44_E_ETC___d232 or
	  IF_i_44_EQ_0_45_THEN_ls_0_2_3_0_ELSE_IF_i_44_E_ETC___d236)
  begin
    case (j)
      8'd0:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d244 =
	      IF_i_44_EQ_0_45_THEN_ls_0_0_3_3_ELSE_IF_i_44_E_ETC___d228;
      8'd1:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d244 =
	      IF_i_44_EQ_0_45_THEN_ls_0_1_3_1_ELSE_IF_i_44_E_ETC___d232;
      8'd2:
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d244 =
	      IF_i_44_EQ_0_45_THEN_ls_0_2_3_0_ELSE_IF_i_44_E_ETC___d236;
      default: IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d244 =
		   IF_i_44_EQ_0_45_THEN_ls_0_3_3_9_ELSE_IF_i_44_E_ETC___d240;
    endcase
  end
  always@(k or
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d244 or
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d181 or
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d202 or
	  IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d223)
  begin
    case (k)
      8'd0:
	  IF_k_EQ_0_61_THEN_IF_j_52_EQ_0_53_THEN_IF_i_44_ETC___d248 =
	      IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d181;
      8'd1:
	  IF_k_EQ_0_61_THEN_IF_j_52_EQ_0_53_THEN_IF_i_44_ETC___d248 =
	      IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d202;
      8'd2:
	  IF_k_EQ_0_61_THEN_IF_j_52_EQ_0_53_THEN_IF_i_44_ETC___d248 =
	      IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d223;
      default: IF_k_EQ_0_61_THEN_IF_j_52_EQ_0_53_THEN_IF_i_44_ETC___d248 =
		   IF_j_52_EQ_0_53_THEN_IF_i_44_EQ_0_45_THEN_ls_0_ETC___d244;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        i <= `BSV_ASSIGNMENT_DELAY 8'd0;
	j <= `BSV_ASSIGNMENT_DELAY 8'd0;
	k <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_0_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_0_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_0_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_0_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_1_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_1_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_1_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_1_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_2_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_2_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_2_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_2_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_3_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_3_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_3_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_0_3_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_0_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_0_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_0_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_0_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_1_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_1_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_1_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_1_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_2_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_2_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_2_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_2_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_3_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_3_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_3_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_1_3_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_0_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_0_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_0_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_0_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_1_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_1_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_1_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_1_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_2_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_2_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_2_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_2_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_3_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_3_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_3_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_2_3_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_0_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_0_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_0_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_0_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_1_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_1_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_1_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_1_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_2_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_2_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_2_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_2_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_3_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_3_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_3_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ls_3_3_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (i$EN) i <= `BSV_ASSIGNMENT_DELAY i$D_IN;
	if (j$EN) j <= `BSV_ASSIGNMENT_DELAY j$D_IN;
	if (k$EN) k <= `BSV_ASSIGNMENT_DELAY k$D_IN;
	if (ls_0_0_0$EN) ls_0_0_0 <= `BSV_ASSIGNMENT_DELAY ls_0_0_0$D_IN;
	if (ls_0_0_1$EN) ls_0_0_1 <= `BSV_ASSIGNMENT_DELAY ls_0_0_1$D_IN;
	if (ls_0_0_2$EN) ls_0_0_2 <= `BSV_ASSIGNMENT_DELAY ls_0_0_2$D_IN;
	if (ls_0_0_3$EN) ls_0_0_3 <= `BSV_ASSIGNMENT_DELAY ls_0_0_3$D_IN;
	if (ls_0_1_0$EN) ls_0_1_0 <= `BSV_ASSIGNMENT_DELAY ls_0_1_0$D_IN;
	if (ls_0_1_1$EN) ls_0_1_1 <= `BSV_ASSIGNMENT_DELAY ls_0_1_1$D_IN;
	if (ls_0_1_2$EN) ls_0_1_2 <= `BSV_ASSIGNMENT_DELAY ls_0_1_2$D_IN;
	if (ls_0_1_3$EN) ls_0_1_3 <= `BSV_ASSIGNMENT_DELAY ls_0_1_3$D_IN;
	if (ls_0_2_0$EN) ls_0_2_0 <= `BSV_ASSIGNMENT_DELAY ls_0_2_0$D_IN;
	if (ls_0_2_1$EN) ls_0_2_1 <= `BSV_ASSIGNMENT_DELAY ls_0_2_1$D_IN;
	if (ls_0_2_2$EN) ls_0_2_2 <= `BSV_ASSIGNMENT_DELAY ls_0_2_2$D_IN;
	if (ls_0_2_3$EN) ls_0_2_3 <= `BSV_ASSIGNMENT_DELAY ls_0_2_3$D_IN;
	if (ls_0_3_0$EN) ls_0_3_0 <= `BSV_ASSIGNMENT_DELAY ls_0_3_0$D_IN;
	if (ls_0_3_1$EN) ls_0_3_1 <= `BSV_ASSIGNMENT_DELAY ls_0_3_1$D_IN;
	if (ls_0_3_2$EN) ls_0_3_2 <= `BSV_ASSIGNMENT_DELAY ls_0_3_2$D_IN;
	if (ls_0_3_3$EN) ls_0_3_3 <= `BSV_ASSIGNMENT_DELAY ls_0_3_3$D_IN;
	if (ls_1_0_0$EN) ls_1_0_0 <= `BSV_ASSIGNMENT_DELAY ls_1_0_0$D_IN;
	if (ls_1_0_1$EN) ls_1_0_1 <= `BSV_ASSIGNMENT_DELAY ls_1_0_1$D_IN;
	if (ls_1_0_2$EN) ls_1_0_2 <= `BSV_ASSIGNMENT_DELAY ls_1_0_2$D_IN;
	if (ls_1_0_3$EN) ls_1_0_3 <= `BSV_ASSIGNMENT_DELAY ls_1_0_3$D_IN;
	if (ls_1_1_0$EN) ls_1_1_0 <= `BSV_ASSIGNMENT_DELAY ls_1_1_0$D_IN;
	if (ls_1_1_1$EN) ls_1_1_1 <= `BSV_ASSIGNMENT_DELAY ls_1_1_1$D_IN;
	if (ls_1_1_2$EN) ls_1_1_2 <= `BSV_ASSIGNMENT_DELAY ls_1_1_2$D_IN;
	if (ls_1_1_3$EN) ls_1_1_3 <= `BSV_ASSIGNMENT_DELAY ls_1_1_3$D_IN;
	if (ls_1_2_0$EN) ls_1_2_0 <= `BSV_ASSIGNMENT_DELAY ls_1_2_0$D_IN;
	if (ls_1_2_1$EN) ls_1_2_1 <= `BSV_ASSIGNMENT_DELAY ls_1_2_1$D_IN;
	if (ls_1_2_2$EN) ls_1_2_2 <= `BSV_ASSIGNMENT_DELAY ls_1_2_2$D_IN;
	if (ls_1_2_3$EN) ls_1_2_3 <= `BSV_ASSIGNMENT_DELAY ls_1_2_3$D_IN;
	if (ls_1_3_0$EN) ls_1_3_0 <= `BSV_ASSIGNMENT_DELAY ls_1_3_0$D_IN;
	if (ls_1_3_1$EN) ls_1_3_1 <= `BSV_ASSIGNMENT_DELAY ls_1_3_1$D_IN;
	if (ls_1_3_2$EN) ls_1_3_2 <= `BSV_ASSIGNMENT_DELAY ls_1_3_2$D_IN;
	if (ls_1_3_3$EN) ls_1_3_3 <= `BSV_ASSIGNMENT_DELAY ls_1_3_3$D_IN;
	if (ls_2_0_0$EN) ls_2_0_0 <= `BSV_ASSIGNMENT_DELAY ls_2_0_0$D_IN;
	if (ls_2_0_1$EN) ls_2_0_1 <= `BSV_ASSIGNMENT_DELAY ls_2_0_1$D_IN;
	if (ls_2_0_2$EN) ls_2_0_2 <= `BSV_ASSIGNMENT_DELAY ls_2_0_2$D_IN;
	if (ls_2_0_3$EN) ls_2_0_3 <= `BSV_ASSIGNMENT_DELAY ls_2_0_3$D_IN;
	if (ls_2_1_0$EN) ls_2_1_0 <= `BSV_ASSIGNMENT_DELAY ls_2_1_0$D_IN;
	if (ls_2_1_1$EN) ls_2_1_1 <= `BSV_ASSIGNMENT_DELAY ls_2_1_1$D_IN;
	if (ls_2_1_2$EN) ls_2_1_2 <= `BSV_ASSIGNMENT_DELAY ls_2_1_2$D_IN;
	if (ls_2_1_3$EN) ls_2_1_3 <= `BSV_ASSIGNMENT_DELAY ls_2_1_3$D_IN;
	if (ls_2_2_0$EN) ls_2_2_0 <= `BSV_ASSIGNMENT_DELAY ls_2_2_0$D_IN;
	if (ls_2_2_1$EN) ls_2_2_1 <= `BSV_ASSIGNMENT_DELAY ls_2_2_1$D_IN;
	if (ls_2_2_2$EN) ls_2_2_2 <= `BSV_ASSIGNMENT_DELAY ls_2_2_2$D_IN;
	if (ls_2_2_3$EN) ls_2_2_3 <= `BSV_ASSIGNMENT_DELAY ls_2_2_3$D_IN;
	if (ls_2_3_0$EN) ls_2_3_0 <= `BSV_ASSIGNMENT_DELAY ls_2_3_0$D_IN;
	if (ls_2_3_1$EN) ls_2_3_1 <= `BSV_ASSIGNMENT_DELAY ls_2_3_1$D_IN;
	if (ls_2_3_2$EN) ls_2_3_2 <= `BSV_ASSIGNMENT_DELAY ls_2_3_2$D_IN;
	if (ls_2_3_3$EN) ls_2_3_3 <= `BSV_ASSIGNMENT_DELAY ls_2_3_3$D_IN;
	if (ls_3_0_0$EN) ls_3_0_0 <= `BSV_ASSIGNMENT_DELAY ls_3_0_0$D_IN;
	if (ls_3_0_1$EN) ls_3_0_1 <= `BSV_ASSIGNMENT_DELAY ls_3_0_1$D_IN;
	if (ls_3_0_2$EN) ls_3_0_2 <= `BSV_ASSIGNMENT_DELAY ls_3_0_2$D_IN;
	if (ls_3_0_3$EN) ls_3_0_3 <= `BSV_ASSIGNMENT_DELAY ls_3_0_3$D_IN;
	if (ls_3_1_0$EN) ls_3_1_0 <= `BSV_ASSIGNMENT_DELAY ls_3_1_0$D_IN;
	if (ls_3_1_1$EN) ls_3_1_1 <= `BSV_ASSIGNMENT_DELAY ls_3_1_1$D_IN;
	if (ls_3_1_2$EN) ls_3_1_2 <= `BSV_ASSIGNMENT_DELAY ls_3_1_2$D_IN;
	if (ls_3_1_3$EN) ls_3_1_3 <= `BSV_ASSIGNMENT_DELAY ls_3_1_3$D_IN;
	if (ls_3_2_0$EN) ls_3_2_0 <= `BSV_ASSIGNMENT_DELAY ls_3_2_0$D_IN;
	if (ls_3_2_1$EN) ls_3_2_1 <= `BSV_ASSIGNMENT_DELAY ls_3_2_1$D_IN;
	if (ls_3_2_2$EN) ls_3_2_2 <= `BSV_ASSIGNMENT_DELAY ls_3_2_2$D_IN;
	if (ls_3_2_3$EN) ls_3_2_3 <= `BSV_ASSIGNMENT_DELAY ls_3_2_3$D_IN;
	if (ls_3_3_0$EN) ls_3_3_0 <= `BSV_ASSIGNMENT_DELAY ls_3_3_0$D_IN;
	if (ls_3_3_1$EN) ls_3_3_1 <= `BSV_ASSIGNMENT_DELAY ls_3_3_1$D_IN;
	if (ls_3_3_2$EN) ls_3_3_2 <= `BSV_ASSIGNMENT_DELAY ls_3_3_2$D_IN;
	if (ls_3_3_3$EN) ls_3_3_3 <= `BSV_ASSIGNMENT_DELAY ls_3_3_3$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    i = 8'hAA;
    j = 8'hAA;
    k = 8'hAA;
    ls_0_0_0 = 8'hAA;
    ls_0_0_1 = 8'hAA;
    ls_0_0_2 = 8'hAA;
    ls_0_0_3 = 8'hAA;
    ls_0_1_0 = 8'hAA;
    ls_0_1_1 = 8'hAA;
    ls_0_1_2 = 8'hAA;
    ls_0_1_3 = 8'hAA;
    ls_0_2_0 = 8'hAA;
    ls_0_2_1 = 8'hAA;
    ls_0_2_2 = 8'hAA;
    ls_0_2_3 = 8'hAA;
    ls_0_3_0 = 8'hAA;
    ls_0_3_1 = 8'hAA;
    ls_0_3_2 = 8'hAA;
    ls_0_3_3 = 8'hAA;
    ls_1_0_0 = 8'hAA;
    ls_1_0_1 = 8'hAA;
    ls_1_0_2 = 8'hAA;
    ls_1_0_3 = 8'hAA;
    ls_1_1_0 = 8'hAA;
    ls_1_1_1 = 8'hAA;
    ls_1_1_2 = 8'hAA;
    ls_1_1_3 = 8'hAA;
    ls_1_2_0 = 8'hAA;
    ls_1_2_1 = 8'hAA;
    ls_1_2_2 = 8'hAA;
    ls_1_2_3 = 8'hAA;
    ls_1_3_0 = 8'hAA;
    ls_1_3_1 = 8'hAA;
    ls_1_3_2 = 8'hAA;
    ls_1_3_3 = 8'hAA;
    ls_2_0_0 = 8'hAA;
    ls_2_0_1 = 8'hAA;
    ls_2_0_2 = 8'hAA;
    ls_2_0_3 = 8'hAA;
    ls_2_1_0 = 8'hAA;
    ls_2_1_1 = 8'hAA;
    ls_2_1_2 = 8'hAA;
    ls_2_1_3 = 8'hAA;
    ls_2_2_0 = 8'hAA;
    ls_2_2_1 = 8'hAA;
    ls_2_2_2 = 8'hAA;
    ls_2_2_3 = 8'hAA;
    ls_2_3_0 = 8'hAA;
    ls_2_3_1 = 8'hAA;
    ls_2_3_2 = 8'hAA;
    ls_2_3_3 = 8'hAA;
    ls_3_0_0 = 8'hAA;
    ls_3_0_1 = 8'hAA;
    ls_3_0_2 = 8'hAA;
    ls_3_0_3 = 8'hAA;
    ls_3_1_0 = 8'hAA;
    ls_3_1_1 = 8'hAA;
    ls_3_1_2 = 8'hAA;
    ls_3_1_3 = 8'hAA;
    ls_3_2_0 = 8'hAA;
    ls_3_2_1 = 8'hAA;
    ls_3_2_2 = 8'hAA;
    ls_3_2_3 = 8'hAA;
    ls_3_3_0 = 8'hAA;
    ls_3_3_1 = 8'hAA;
    ls_3_3_2 = 8'hAA;
    ls_3_3_3 = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd0),
		 $signed(32'd0),
		 $unsigned(ls_0_0_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd0),
		 $signed(32'd1),
		 $unsigned(ls_0_0_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd0),
		 $signed(32'd2),
		 $unsigned(ls_0_0_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd0),
		 $signed(32'd3),
		 $unsigned(ls_0_0_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd1),
		 $signed(32'd0),
		 $unsigned(ls_0_1_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd1),
		 $signed(32'd1),
		 $unsigned(ls_0_1_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd1),
		 $signed(32'd2),
		 $unsigned(ls_0_1_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd1),
		 $signed(32'd3),
		 $unsigned(ls_0_1_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd2),
		 $signed(32'd0),
		 $unsigned(ls_0_2_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd2),
		 $signed(32'd1),
		 $unsigned(ls_0_2_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd2),
		 $signed(32'd2),
		 $unsigned(ls_0_2_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd2),
		 $signed(32'd3),
		 $unsigned(ls_0_2_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd6));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd3),
		 $signed(32'd0),
		 $unsigned(ls_0_3_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd3),
		 $signed(32'd1),
		 $unsigned(ls_0_3_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd3),
		 $signed(32'd2),
		 $unsigned(ls_0_3_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd6));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd0),
		 $signed(32'd3),
		 $signed(32'd3),
		 $unsigned(ls_0_3_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd9));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd0),
		 $signed(32'd0),
		 $unsigned(ls_1_0_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd0),
		 $signed(32'd1),
		 $unsigned(ls_1_0_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd0),
		 $signed(32'd2),
		 $unsigned(ls_1_0_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd0),
		 $signed(32'd3),
		 $unsigned(ls_1_0_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd1),
		 $signed(32'd0),
		 $unsigned(ls_1_1_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd1),
		 $signed(32'd1),
		 $unsigned(ls_1_1_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd1),
		 $signed(32'd2),
		 $unsigned(ls_1_1_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd1),
		 $signed(32'd3),
		 $unsigned(ls_1_1_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd2),
		 $signed(32'd0),
		 $unsigned(ls_1_2_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd2),
		 $signed(32'd1),
		 $unsigned(ls_1_2_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd2),
		 $signed(32'd2),
		 $unsigned(ls_1_2_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd5));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd2),
		 $signed(32'd3),
		 $unsigned(ls_1_2_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd7));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd3),
		 $signed(32'd0),
		 $unsigned(ls_1_3_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd3),
		 $signed(32'd1),
		 $unsigned(ls_1_3_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd3),
		 $signed(32'd2),
		 $unsigned(ls_1_3_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd7));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd1),
		 $signed(32'd3),
		 $signed(32'd3),
		 $unsigned(ls_1_3_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd10));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd0),
		 $signed(32'd0),
		 $unsigned(ls_2_0_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd0),
		 $signed(32'd1),
		 $unsigned(ls_2_0_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd0),
		 $signed(32'd2),
		 $unsigned(ls_2_0_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd0),
		 $signed(32'd3),
		 $unsigned(ls_2_0_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd1),
		 $signed(32'd0),
		 $unsigned(ls_2_1_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd1),
		 $signed(32'd1),
		 $unsigned(ls_2_1_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd1),
		 $signed(32'd2),
		 $unsigned(ls_2_1_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd1),
		 $signed(32'd3),
		 $unsigned(ls_2_1_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd5));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd2),
		 $signed(32'd0),
		 $unsigned(ls_2_2_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd2),
		 $signed(32'd1),
		 $unsigned(ls_2_2_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd2),
		 $signed(32'd2),
		 $unsigned(ls_2_2_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd6));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd2),
		 $signed(32'd3),
		 $unsigned(ls_2_2_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd3),
		 $signed(32'd0),
		 $unsigned(ls_2_3_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd3),
		 $signed(32'd1),
		 $unsigned(ls_2_3_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd5));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd3),
		 $signed(32'd2),
		 $unsigned(ls_2_3_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd2),
		 $signed(32'd3),
		 $signed(32'd3),
		 $unsigned(ls_2_3_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd11));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd0),
		 $signed(32'd0),
		 $unsigned(ls_3_0_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd0),
		 $signed(32'd1),
		 $unsigned(ls_3_0_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd0),
		 $signed(32'd2),
		 $unsigned(ls_3_0_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd0),
		 $signed(32'd3),
		 $unsigned(ls_3_0_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd1),
		 $signed(32'd0),
		 $unsigned(ls_3_1_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd1),
		 $signed(32'd1),
		 $unsigned(ls_3_1_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd1),
		 $signed(32'd2),
		 $unsigned(ls_3_1_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd5));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd1),
		 $signed(32'd3),
		 $unsigned(ls_3_1_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd6));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd2),
		 $signed(32'd0),
		 $unsigned(ls_3_2_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd2),
		 $signed(32'd1),
		 $unsigned(ls_3_2_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd5));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd2),
		 $signed(32'd2),
		 $unsigned(ls_3_2_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd7));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd2),
		 $signed(32'd3),
		 $unsigned(ls_3_2_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd9));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd3),
		 $signed(32'd0),
		 $unsigned(ls_3_3_0));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd3),
		 $signed(32'd1),
		 $unsigned(ls_3_3_1));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd6));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd3),
		 $signed(32'd2),
		 $unsigned(ls_3_3_2));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd9));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4)
	$display("ls[%0d][%0d][%0d] = %0d",
		 $signed(32'd3),
		 $signed(32'd3),
		 $signed(32'd3),
		 $unsigned(ls_3_3_3));
    if (RST_N != `BSV_RESET_VALUE)
      if (k == 8'd4) $display("i + (j * k) = %0d", $signed(32'd12));
    if (RST_N != `BSV_RESET_VALUE) if (k == 8'd4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      $display("Current field",
	       $unsigned(IF_k_EQ_0_61_THEN_IF_j_52_EQ_0_53_THEN_IF_i_44_ETC___d248));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_write)
	$display("Writing ls[%0d][%0d][%0d]",
		 $unsigned(i),
		 $unsigned(j),
		 $unsigned(k));
  end
  // synopsys translate_on
endmodule  // sysListReg3D

