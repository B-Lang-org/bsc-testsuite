data MOD_sysMethods =
    MOD_sysMethods
	{ inst_x__sysMethods :: MOD_RegN #51
	, inst_y__sysMethods :: MOD_RegN #51
	};

ctor_sysMethods :: MOD_sysMethods;
ctor_sysMethods =
    MOD_sysMethods
	{ inst_x__sysMethods = ctor_RegN (51 :: Bit #32) (primAny :: Bit #51)
	, inst_y__sysMethods = ctor_RegN (51 :: Bit #32) (0 :: Bit #51)
	};

dim_sysMethods :: MOD_sysMethods -> MOD_sysMethods -> Bool;
dim_sysMethods =
    (\ (mod1 :: MOD_sysMethods) ->
     (\ (mod2 :: MOD_sysMethods) ->
      (dim_RegN (inst_x__sysMethods mod1) (inst_x__sysMethods mod2))
      && (dim_RegN (inst_y__sysMethods mod1) (inst_y__sysMethods mod2))));

rule_RL_flip_sysMethods :: MOD_sysMethods -> (Bool, MOD_sysMethods, ());
rule_RL_flip_sysMethods =
    (\ (state0 :: MOD_sysMethods) ->
     let { (def_b__h117 :: Bit #51) = meth_read_RegN (inst_y__sysMethods state0)
	 ; (def_b__h116 :: Bit #51) = meth_read_RegN (inst_x__sysMethods state0)
	 ; (def_y_EQ_0___d5 :: Bool) = primEQ def_b__h117 (0 :: Bit #51)
	 ; (def_x_ULE_y___d3 :: Bool) = primULE def_b__h116 def_b__h117
	 ; (def_NOT_x_ULE_y_AND_NOT_y_EQ_0___d7 :: Bool) = (not def_x_ULE_y___d3) && (not def_y_EQ_0___d5)
	 ; (act1 :: (Bool, MOD_RegN #51, ())) = meth_write_RegN def_b__h117 (inst_x__sysMethods state0)
	 ; (guard1 :: Bool) = fst3 act1
	 ; (state1 :: MOD_sysMethods) = state0 { inst_x__sysMethods = snd3 act1 }
	 ; (act2 :: (Bool, MOD_RegN #51, ())) = meth_write_RegN def_b__h116 (inst_y__sysMethods state1)
	 ; (guard2 :: Bool) = guard1 && (fst3 act2)
	 ; (state2 :: MOD_sysMethods) = state1 { inst_y__sysMethods = snd3 act2 }
	 }
     in mktuple (def_NOT_x_ULE_y_AND_NOT_y_EQ_0___d7 && guard2) state2 ());

rule_RL_sub_sysMethods :: MOD_sysMethods -> (Bool, MOD_sysMethods, ());
rule_RL_sub_sysMethods =
    (\ (state0 :: MOD_sysMethods) ->
     let { (def_b__h117 :: Bit #51) = meth_read_RegN (inst_y__sysMethods state0)
	 ; (def_b__h116 :: Bit #51) = meth_read_RegN (inst_x__sysMethods state0)
	 ; (def_y_EQ_0___d5 :: Bool) = primEQ def_b__h117 (0 :: Bit #51)
	 ; (def_x_ULE_y___d3 :: Bool) = primULE def_b__h116 def_b__h117
	 ; (def_x_ULE_y_AND_NOT_y_EQ_0___d8 :: Bool) = def_x_ULE_y___d3 && (not def_y_EQ_0___d5)
	 ; (def_y_MINUS_x___d9 :: Bit #51) = primSub def_b__h117 def_b__h116
	 ; (act1 :: (Bool, MOD_RegN #51, ())) =
	       meth_write_RegN def_y_MINUS_x___d9 (inst_y__sysMethods state0)
	 ; (guard1 :: Bool) = fst3 act1
	 ; (state1 :: MOD_sysMethods) = state0 { inst_y__sysMethods = snd3 act1 }
	 }
     in mktuple (def_x_ULE_y_AND_NOT_y_EQ_0___d8 && guard1) state1 ());

meth_result_sysMethods :: MOD_sysMethods -> Bit #51;
meth_result_sysMethods =
    (\ (state0 :: MOD_sysMethods) -> meth_read_RegN (inst_x__sysMethods state0));

meth_RDY_result_sysMethods :: MOD_sysMethods -> Bool;
meth_RDY_result_sysMethods =
    (\ (state0 :: MOD_sysMethods) ->
     let { (def_b__h117 :: Bit #51) = meth_read_RegN (inst_y__sysMethods state0)
	 ; (def_y_EQ_0___d5 :: Bool) = primEQ def_b__h117 (0 :: Bit #51)
	 }
     in def_y_EQ_0___d5);

meth_start_sysMethods :: Bit #51 -> Bit #51 -> MOD_sysMethods -> (Bool, MOD_sysMethods, ());
meth_start_sysMethods =
    (\ (arg_start_num1 :: Bit #51) ->
     (\ (arg_start_num2 :: Bit #51) ->
      (\ (state0 :: MOD_sysMethods) ->
       let { (act1 :: (Bool, MOD_RegN #51, ())) =
		 meth_write_RegN arg_start_num1 (inst_x__sysMethods state0)
	   ; (guard1 :: Bool) = fst3 act1
	   ; (state1 :: MOD_sysMethods) = state0 { inst_x__sysMethods = snd3 act1 }
	   ; (act2 :: (Bool, MOD_RegN #51, ())) = meth_write_RegN arg_start_num2 (inst_y__sysMethods state1)
	   ; (guard2 :: Bool) = guard1 && (fst3 act2)
	   ; (state2 :: MOD_sysMethods) = state1 { inst_y__sysMethods = snd3 act2 }
	   }
       in mktuple guard2 state2 ())));

meth_RDY_start_sysMethods :: MOD_sysMethods -> Bool;
meth_RDY_start_sysMethods =
    (\ (state0 :: MOD_sysMethods) ->
     let { (def_b__h117 :: Bit #51) = meth_read_RegN (inst_y__sysMethods state0)
	 ; (def_y_EQ_0___d5 :: Bool) = primEQ def_b__h117 (0 :: Bit #51)
	 }
     in def_y_EQ_0___d5);

meth_start_and_result_sysMethods :: Bit #51 -> Bit #51 -> MOD_sysMethods -> (Bool, MOD_sysMethods, Bit #51);
meth_start_and_result_sysMethods =
    (\ (arg_start_and_result_num1 :: Bit #51) ->
     (\ (arg_start_and_result_num2 :: Bit #51) ->
      (\ (state0 :: MOD_sysMethods) ->
       let { (def_b__h116 :: Bit #51) = meth_read_RegN (inst_x__sysMethods state0)
	   ; (act1 :: (Bool, MOD_RegN #51, ())) =
		 meth_write_RegN arg_start_and_result_num1 (inst_x__sysMethods state0)
	   ; (guard1 :: Bool) = fst3 act1
	   ; (state1 :: MOD_sysMethods) = state0 { inst_x__sysMethods = snd3 act1 }
	   ; (act2 :: (Bool, MOD_RegN #51, ())) =
		 meth_write_RegN arg_start_and_result_num2 (inst_y__sysMethods state1)
	   ; (guard2 :: Bool) = guard1 && (fst3 act2)
	   ; (state2 :: MOD_sysMethods) = state1 { inst_y__sysMethods = snd3 act2 }
	   }
       in mktuple guard2 state2 def_b__h116)));

meth_RDY_start_and_result_sysMethods :: MOD_sysMethods -> Bool;
meth_RDY_start_and_result_sysMethods =
    (\ (state0 :: MOD_sysMethods) -> True);
